/*
 * Stm32_F103C6_GPIO_Driver.c
 *
 *  Created on: Sep 26, 2023
 *      Author: omar pc
 */
 #include "Stm32_F103C6_GPIO_Driver.h"

 //========================================================================
 //								PRIVATE PROTOTYPES
 //========================================================================
 uint8_t _FindPinNum (uint16_t PinNumber);
 void _WriteNBits (uint32_t* address , uint8_t offset , uint32_t nbits , uint8_t n );
 void _WriteHalfWord (uint32_t* address , uint8_t offset , uint16_t hword);
 void _WriteHalfByte (uint32_t* address , uint8_t offset , uint8_t hbyte);
 void _WriteWord (uint32_t* address , uint32_t word);
 void _WriteByte (uint32_t* address , uint8_t offset , uint8_t byte);



/* =================================================================
 * @FN			- MCAL_GPIO_Init
 * @Brief		- Initialize a GPIOx Pin Y According to Parameters in PinConfig
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- PinConfig: Structure where the configuration of the pins is stored.
 * @retval		- NONE
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */

void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t PinConfig)
{
	//Enable the RCC on the GPIO port

	//Initialize the pin mode
	uint8_t PINNUM = _FindPinNum(PinConfig.GPIO_PinNumber);
	//Port Configuration register low GPIOx_CRL -> Configure pin 0 to pin 7
	if(PinConfig.GPIO_PinNumber< GPIO_PIN_8)
	{
		switch(PinConfig.GPIO_MODE)
		{
			case GPIO_MODE_ANALOG:
				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
				break;

			case GPIO_MODE_INPUT_FLO:
				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
				break;

			case GPIO_MODE_INPUT_PU:
				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_INPUT_PD:
				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_OUTPUT_PP:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
				{
					case GPIO_SPEED_10M:
						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
						break;
					case GPIO_SPEED_2M:
						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
						break;
					case GPIO_SPEED_50M:
						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
						break;
				}
				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
				break;

			case GPIO_MODE_OUTPUT_OD:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
				{
					case GPIO_SPEED_10M:
						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
						break;
					case GPIO_SPEED_2M:
						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
						break;
					case GPIO_SPEED_50M:
						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
						break;
				}
				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
				break;

			case GPIO_MODE_OUTPUT_AF_PP:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
					{
						case GPIO_SPEED_10M:
							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
							break;
						case GPIO_SPEED_2M:
							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
							break;
						case GPIO_SPEED_50M:
							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
							break;
					}
				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_OUTPUT_AF_OD:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
					{
						case GPIO_SPEED_10M:
							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
							break;
						case GPIO_SPEED_2M:
							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
							break;
						case GPIO_SPEED_50M:
							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
							break;
					}
				(GPIOx->CRL) |= (0Xc<<4*PINNUM);   //set two bits in CNF
				break;

			case GPIO_MODE_INPUT_AF:
				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
				break;
		}
	}



	//Port Configuration register high GPIOx_CRH -> Configure pin 8 to pin 15
	else{
		PINNUM = PINNUM - 8;
		switch(PinConfig.GPIO_MODE)
		{
			case GPIO_MODE_ANALOG:
				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
				break;

			case GPIO_MODE_INPUT_FLO:
				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
				break;

			case GPIO_MODE_INPUT_PU:
				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_INPUT_PD:
				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_OUTPUT_PP:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
				{
					case GPIO_SPEED_10M:
						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
						break;
					case GPIO_SPEED_2M:
						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
						break;
					case GPIO_SPEED_50M:
						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
						break;
				}
				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
				break;

			case GPIO_MODE_OUTPUT_OD:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
				{
					case GPIO_SPEED_10M:
						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
						break;
					case GPIO_SPEED_2M:
						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
						break;
					case GPIO_SPEED_50M:
						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
						break;
				}
				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
				break;

			case GPIO_MODE_OUTPUT_AF_PP:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
					{
						case GPIO_SPEED_10M:
							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
							break;
						case GPIO_SPEED_2M:
							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
							break;
						case GPIO_SPEED_50M:
							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
							break;
					}
				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
				break;

			case GPIO_MODE_OUTPUT_AF_OD:
				switch(PinConfig.GPIO_OUTPUT_SPEED)
					{
						case GPIO_SPEED_10M:
							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
							break;
						case GPIO_SPEED_2M:
							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
							break;
						case GPIO_SPEED_50M:
							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
							break;
					}
				(GPIOx->CRH) |= (0Xc<<4*PINNUM);   //set two bits in CNF
				break;

			case GPIO_MODE_INPUT_AF:
				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
				break;
		}
	}
}
/* =================================================================
 * @FN			- MCAL_GPIO_DeInit
 * @Brief		- DeInitialize a GPIOx Whole peripheral
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @retval		- NONE
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
	//Write the reset values for GPIOx
	GPIOx->CRL =  0x44444444;
	GPIOx->CRH =  0x44444444;
	GPIOx->ODR =  0x00;
	GPIOx->IDR =  0x00;
	GPIOx->BSRR = 0x00;
	GPIOx->BRR =  0x00;
	GPIOx->LCKR = 0x00;
}

/* =================================================================
 * @FN			- MCAL_GPIO_Read_PIN
 * @Brief		- Read GPIOx Pin y and return the value
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- PinNumber: the number of pin to read @ref GPIO_PINS_define
 * @retval		- The value of the pin "two values based on @ref GPIO_PIN_state"
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint8_t MCAL_GPIO_Read_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber)
{
	//Read a specific pin value
	uint8_t PINNUM = _FindPinNum(PinNumber);
	return ((GPIOx->IDR)&PinNumber)>>PINNUM;
}

/* =================================================================
 * @FN			- MCAL_GPIO_Read_PORT
 * @Brief		- Read GPIOx and return the value
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @retval		- The value of the Port
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint16_t MCAL_GPIO_Read_PORT(GPIO_TypeDef* GPIOx)
{
	//Read the whole port at once
	return (GPIOx->IDR)&0xFFFF;
}

/* =================================================================
 * @FN			- MCAL_GPIO_write_PIN
 * @Brief		- Write a certain value to GPIOx Pin y
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- PinNumber: the number of pin to read @ref GPIO_PINS_define
 * @param(in)	- Value: The value of the pin "two values based on @ref GPIO_PIN_state"
 * @retval		- NONE
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Write_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber,uint8_t Value)
{
	switch (Value)
	{
		//If Value to be written is low
		case GPIO_PIN_LOW:
			//Reset the pin
			(GPIOx->ODR) &= ~PinNumber;
			break;
		//If Value to be written is high
		case GPIO_PIN_HIGH:
			//Set the pin
			(GPIOx->ODR) |= PinNumber;
			break;
		default:
			break;
	}

}

/* =================================================================
 * @FN			- MCAL_GPIO_write_PIN
 * @Brief		- Write a certain value to GPIOx
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- Value: The value of be written on the port (varies from 0x0000 to 0xFFFF)
 * @retval		- NONE
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Write_PORT(GPIO_TypeDef* GPIOx ,uint16_t Value)
{
	//Write the value on the whole port
	(GPIOx->ODR) = (Value & 0xFFFF);
}

/* =================================================================
 * @FN			- MCAL_GPIO_Toggle_PIN
 * @Brief		- Toggle a certain GPIOx Pin y
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- PinNumber: the number of pin to read @ref GPIO_PINS_define
 * @retval		- NONE
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Toggle_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber)
{
	//Toggle the Pin using the given pin number
	(GPIOx->ODR) ^= PinNumber;
}

/* =================================================================
 * @FN			- MCAL_GPIO_Lock_PIN
 * @Brief		- Lock a certain GPIOx pin y and freeze the IO mechanism
 * @param(in)	- GPIOx: where x can be (A,B...E depending on device used) to select the GPIO peripheral
 * @param(in)	- PinNumber: the number of pin to read @ref GPIO_PINS_define
 * @retval		- Return Values OK or Error for the Pin locking procedure @ref GPIO_PIN_LOCKING_STATUS_define
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint8_t MCAL_GPIO_Lock_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber)
{
	//Write 1
	(GPIOx->LCKR) |= PinNumber;
	//Write 0
	(GPIOx->LCKR) &= ~PinNumber;
	//Write 1
	(GPIOx->LCKR) |= PinNumber;
	//Read 0
	(GPIOx->LCKR) & PinNumber;
	//Read 1
	if((GPIOx->LCKR) & PinNumber) return GPIO_PIN_LOCK_OK;
	else GPIO_PIN_LOCK_ERROR;
}

/* =================================================================
 * @FN			- _FindPinNum
 * @Brief		- Helper Function to return the pin number of the defines
 * @param(in)	- PinNumber: the number of pin to read @ref GPIO_PINS_define
 * @retval		- Return the number of the pin (0,1,2,3,4)
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint8_t _FindPinNum (uint16_t PinNumber)
{
	int counter=0;
	while(PinNumber){
		counter ++;
		PinNumber = (PinNumber>>1);
	}
	return counter-1;
}
/* =================================================================
 * @FN			- _WriteByte
 * @Brief		- Helper Function to write a byte at once in a register
 * @param(in)	- Address: the base address of the register
 * @param(in)	- Offset: the offset of the byte to write onto (0,1,2,3)
 * @param(in)	- Byte: the byte to be written on the register
 * @retval		- NONE
 * Note-		- NONE
 * =================================================================
 */
void _WriteByte (uint32_t* address , uint8_t offset , uint8_t byte)
{
    if(offset > 3){return;}
    * ((uint8_t*)(address)+offset) = byte;
}
/* =================================================================
 * @FN			- _WriteWord
 * @Brief		- Helper Function to write a Word at once in a register
 * @param(in)	- Address: the base address of the register
 * @param(in)	- Word: the word to be written on the register
 * @retval		- NONE
 * Note-		- NONE
 * =================================================================
 */
void _WriteWord (uint32_t* address , uint32_t word)
{
    *address = word;
}

/* =================================================================
 * @FN			- _WriteHalfByte
 * @Brief		- Helper Function to write a Word at once in a register
 * @param(in)	- Address: the base address of the register
 * @param(in)	- Offset: the offset of the half byte to write onto (0,1,2,3,4,5,6,7)
 * @param(in)	- hbyte: the hbyte to be written on the register
 * @retval		- NONE
 * Note-		- NONE
 * =================================================================
 */
void _WriteHalfByte (uint32_t* address , uint8_t offset , uint8_t hbyte)
{
    uint8_t counter = 0;
	while(counter < 4)
	{
	   //safety
	   if(hbyte>=0x10 || offset > 7){break;}

	   if(hbyte&(1<<counter))
	   {
	       * address |= (1<<(offset*4)+counter);
	   }
	   else
	   {
	       * address &= ~(1<<(offset*4)+counter);
	   }
	   counter ++;
	}
}
/* =================================================================
 * @FN			- _WriteHalfWord
 * @Brief		- Helper Function to write a Word at once in a register
 * @param(in)	- Address: the base address of the register
 * @param(in)	- Offset: the offset of the half word to write onto (0,1)
 * @param(in)	- hword: the half word to be written on the register
 * @retval		- NONE
 * Note-		- NONE
 * =================================================================
 */
void _WriteHalfWord (uint32_t* address , uint8_t offset , uint16_t hword)
{
    if(offset > 1){return;}
    *((uint16_t*)(address)+offset) = hword;
}

/* =================================================================
 * @FN			- _WriteNBits
 * @Brief		- Helper Function to write n number of bits to a register at a certain offset
 * @param(in)	- Address: the base address of the register
 * @param(in)	- Offset: the offset of the byte to write onto (0,1,2,3)
 * @param(in)	- Nbits: the bits written on the register
 * @param(in)	- N: the number of bits to be written on the register
 * @retval		- NONE
 * Note-		- NONE
 * =================================================================
 */
void _WriteNBits (uint32_t* address , uint8_t offset , uint32_t nbits , uint8_t n )
{
    uint8_t counter = 0;
	while(counter < n)
	{
	   if(nbits&(1<<counter))
	   {
	       * address |= (1<<(offset+counter));
	   }
	   else
	   {
	       * address &= ~(1<<(offset+counter));
	   }
	   counter ++;
	}
}
