
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800162c  0800162c  00011634  2**0
                  CONTENTS
  4 .ARM          00000000  0800162c  0800162c  00011634  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800162c  08001634  00011634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08001634  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001634  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011634  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001165d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e30  00000000  00000000  000116a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008a8  00000000  00000000  000134d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000d04  00000000  00000000  00013d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000228  00000000  00000000  00014a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001d8  00000000  00000000  00014ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001260  00000000  00000000  00014e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003678  00000000  00000000  000160e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ae06  00000000  00000000  00019758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000006d0  00000000  00000000  00024560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080015fc 	.word	0x080015fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080015fc 	.word	0x080015fc

08000170 <clock_init>:
#define	MCU_MASTER

uint16_t ch ;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock for GPIO
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	//Enable AFIO
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <Omar_UART_IRQ_Callback>:

void Omar_UART_IRQ_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <Omar_UART_IRQ_Callback+0x40>)
 80001ae:	f001 f98d 	bl	80014cc <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	490a      	ldr	r1, [pc, #40]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <Omar_UART_IRQ_Callback+0x40>)
 80001b8:	f001 f966 	bl	8001488 <MCAL_UART_SendData>

#ifdef MCU_MASTER
	//Send to SPI
	MCAL_GPIO_Write_PIN(GPIOA, GPIO_PIN_4, GPIO_PIN_LOW);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <Omar_UART_IRQ_Callback+0x44>)
 80001c2:	f000 fdc9 	bl	8000d58 <MCAL_GPIO_Write_PIN>
	MCAL_SPI_TX_RX(SPI1 ,  &ch , SPI_POLL_enable);
 80001c6:	2200      	movs	r2, #0
 80001c8:	4905      	ldr	r1, [pc, #20]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <Omar_UART_IRQ_Callback+0x48>)
 80001cc:	f000 fef8 	bl	8000fc0 <MCAL_SPI_TX_RX>
	MCAL_GPIO_Write_PIN(GPIOA, GPIO_PIN_4, GPIO_PIN_HIGH);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <Omar_UART_IRQ_Callback+0x44>)
 80001d6:	f000 fdbf 	bl	8000d58 <MCAL_GPIO_Write_PIN>
#endif

}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	40013800 	.word	0x40013800
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40013000 	.word	0x40013000

080001f0 <main>:



 int main(void)
 {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
	 UART_Config_t UART_Cfg;



	 clock_init();
 80001f6:	f7ff ffbb 	bl	8000170 <clock_init>

	 UART_Cfg.USART_BAUDRATE = USART_BAUDRATE_115200;
 80001fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001fe:	623b      	str	r3, [r7, #32]
	 UART_Cfg.USART_FLWCTRL = USART_FLWCTRL_NONE;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 UART_Cfg.USART_IRQ_ENABLE = USART_IRQ_ENABLE_RXNEIE ;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 UART_Cfg.USART_PARITY = USART_PARITY_NONE;
 800020c:	2300      	movs	r3, #0
 800020e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 UART_Cfg.USART_PAYLOAD_LENGTH = USART_PAYLOAD_LENGTH_8Bits;
 8000212:	2300      	movs	r3, #0
 8000214:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 UART_Cfg.USART_STOP = USART_STOP_ONE;
 8000218:	2300      	movs	r3, #0
 800021a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 UART_Cfg.USART_MODE = USART_MODE_TX_RX;
 800021e:	230c      	movs	r3, #12
 8000220:	773b      	strb	r3, [r7, #28]
	 UART_Cfg.P_IRQ_CALLBACK = Omar_UART_IRQ_Callback ;
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <main+0xa0>)
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c

	 MCAL_UART_Init(USART1, &UART_Cfg);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	4619      	mov	r1, r3
 800022c:	4819      	ldr	r0, [pc, #100]	; (8000294 <main+0xa4>)
 800022e:	f001 f843 	bl	80012b8 <MCAL_UART_Init>
	 MCAL_UART_GPIO_Set_Pins(USART1);
 8000232:	4818      	ldr	r0, [pc, #96]	; (8000294 <main+0xa4>)
 8000234:	f001 f97c 	bl	8001530 <MCAL_UART_GPIO_Set_Pins>

	 //SPI Init
	 SPI_Config_t SPI_Cfg ;

	 SPI_Cfg.SPI_CLK_PHASE = SPI_CLK_PHASE_SEC_EDGE_SMPL;
 8000238:	2301      	movs	r3, #1
 800023a:	81fb      	strh	r3, [r7, #14]
	 SPI_Cfg.SPI_DATA_SIZE = SPI_DATA_SIZE_8BITS;
 800023c:	2300      	movs	r3, #0
 800023e:	817b      	strh	r3, [r7, #10]
	 SPI_Cfg.SPI_CLK_POLARITY = SPI_CLK_POLARITY_IDLE_HIGH;
 8000240:	2302      	movs	r3, #2
 8000242:	81bb      	strh	r3, [r7, #12]
	 SPI_Cfg.SPI_FRAME_FORMAT = SPI_FRAME_FORMAT_MSB_FIRST;
 8000244:	2300      	movs	r3, #0
 8000246:	813b      	strh	r3, [r7, #8]

	 //Assume by default that the pclk2 = 8 MHz
	 SPI_Cfg.SPI_BR_PRESC = SPI_BR_PRESC_8;
 8000248:	2310      	movs	r3, #16
 800024a:	82bb      	strh	r3, [r7, #20]

#ifdef MCU_MASTER
	 SPI_Cfg.SPI_DEVICE_MODE = SPI_DEVICE_MODE_MASTER;
 800024c:	2304      	movs	r3, #4
 800024e:	80bb      	strh	r3, [r7, #4]
	 SPI_Cfg.SPI_IRQ_ENABLE = SPI_IRQ_ENABLE_NONE;
 8000250:	2300      	movs	r3, #0
 8000252:	823b      	strh	r3, [r7, #16]
	 SPI_Cfg.SPI_NSS = SPI_NSS_SW_NSSI_SET;
 8000254:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000258:	827b      	strh	r3, [r7, #18]
	 SPI_Cfg.P_IRQ_CALLBACK = NULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]

#ifdef MCU_SLAVE

#endif

	 MCAL_SPI_Init(SPI1, &SPI_Cfg);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4619      	mov	r1, r3
 8000262:	480d      	ldr	r0, [pc, #52]	; (8000298 <main+0xa8>)
 8000264:	f000 fe12 	bl	8000e8c <MCAL_SPI_Init>
	 MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <main+0xa8>)
 800026a:	f000 fed3 	bl	8001014 <MCAL_SPI_GPIO_Set_Pins>

	 //Configure SS on PA4 by GPIO
	 GPIO_PinConfig_t PIN_Cfg;
	 PIN_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 800026e:	2310      	movs	r3, #16
 8000270:	803b      	strh	r3, [r7, #0]
	 PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000272:	2304      	movs	r3, #4
 8000274:	70bb      	strb	r3, [r7, #2]
	 PIN_Cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000276:	2300      	movs	r3, #0
 8000278:	70fb      	strb	r3, [r7, #3]

	 MCAL_GPIO_Init(GPIOA, PIN_Cfg);
 800027a:	6839      	ldr	r1, [r7, #0]
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0xac>)
 800027e:	f000 f943 	bl	8000508 <MCAL_GPIO_Init>

	 //Force the Slave Select to High
	 MCAL_GPIO_Write_PIN(GPIOA, GPIO_PIN_4, GPIO_PIN_HIGH);
 8000282:	2201      	movs	r2, #1
 8000284:	2110      	movs	r1, #16
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0xac>)
 8000288:	f000 fd66 	bl	8000d58 <MCAL_GPIO_Write_PIN>



	/*Loop Forever*/
	while (1)
 800028c:	e7fe      	b.n	800028c <main+0x9c>
 800028e:	bf00      	nop
 8000290:	080001a5 	.word	0x080001a5
 8000294:	40013800 	.word	0x40013800
 8000298:	40013000 	.word	0x40013000
 800029c:	40010800 	.word	0x40010800

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f001 f971 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff8d 	bl	80001f0 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08001634 	.word	0x08001634
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	20000068 	.word	0x20000068

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <EXTI0_IRQHandler>:

 //========================================================================
 //								ISR Functions
 //========================================================================
 void EXTI0_IRQHandler (void)
 {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,0);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI0_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI0_IRQHandler+0x1c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[0]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI0_IRQHandler+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4798      	blx	r3

 }
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000020 	.word	0x20000020

08000318 <EXTI1_IRQHandler>:

 void EXTI1_IRQHandler (void)
 {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,1);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI1_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI1_IRQHandler+0x1c>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[1]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI1_IRQHandler+0x20>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4798      	blx	r3

 }
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000020 	.word	0x20000020

0800033c <EXTI2_IRQHandler>:

 void EXTI2_IRQHandler (void)
 {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,2);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI2_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI2_IRQHandler+0x1c>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[2]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI2_IRQHandler+0x20>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4798      	blx	r3

 }
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000020 	.word	0x20000020

08000360 <EXTI3_IRQHandler>:

 void EXTI3_IRQHandler (void)
 {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,3);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI3_IRQHandler+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <EXTI3_IRQHandler+0x1c>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[3]();
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <EXTI3_IRQHandler+0x20>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4798      	blx	r3

 }
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010400 	.word	0x40010400
 8000380:	20000020 	.word	0x20000020

08000384 <EXTI4_IRQHandler>:

 void EXTI4_IRQHandler (void)
 {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,4);
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI4_IRQHandler+0x1c>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI4_IRQHandler+0x1c>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[4]();
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <EXTI4_IRQHandler+0x20>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4798      	blx	r3

 }
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010400 	.word	0x40010400
 80003a4:	20000020 	.word	0x20000020

080003a8 <EXTI9_5_IRQHandler>:


 void EXTI9_5_IRQHandler (void)
 {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 if( ReadBit(EXTI->PR,5) )	 	{ SetBit(EXTI->PR,5); GP_IRQ_CALLBACK[5]();}
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d009      	beq.n	80003cc <EXTI9_5_IRQHandler+0x24>
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a24      	ldr	r2, [pc, #144]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6153      	str	r3, [r2, #20]
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <EXTI9_5_IRQHandler+0xac>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4798      	blx	r3
	 else if( ReadBit(EXTI->PR,6) ) { SetBit(EXTI->PR,6); GP_IRQ_CALLBACK[6]();}
	 else if( ReadBit(EXTI->PR,7) ) { SetBit(EXTI->PR,7); GP_IRQ_CALLBACK[7]();}
	 else if( ReadBit(EXTI->PR,8) ) { SetBit(EXTI->PR,8); GP_IRQ_CALLBACK[8]();}
	 else if( ReadBit(EXTI->PR,9) ) { SetBit(EXTI->PR,9); GP_IRQ_CALLBACK[9]();}

 }
 80003ca:	e03e      	b.n	800044a <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,6) ) { SetBit(EXTI->PR,6); GP_IRQ_CALLBACK[6]();}
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <EXTI9_5_IRQHandler+0x44>
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e2:	6153      	str	r3, [r2, #20]
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <EXTI9_5_IRQHandler+0xac>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4798      	blx	r3
 }
 80003ea:	e02e      	b.n	800044a <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,7) ) { SetBit(EXTI->PR,7); GP_IRQ_CALLBACK[7]();}
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d009      	beq.n	800040c <EXTI9_5_IRQHandler+0x64>
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000402:	6153      	str	r3, [r2, #20]
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <EXTI9_5_IRQHandler+0xac>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4798      	blx	r3
 }
 800040a:	e01e      	b.n	800044a <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,8) ) { SetBit(EXTI->PR,8); GP_IRQ_CALLBACK[8]();}
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000414:	2b00      	cmp	r3, #0
 8000416:	d009      	beq.n	800042c <EXTI9_5_IRQHandler+0x84>
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a0c      	ldr	r2, [pc, #48]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800041e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <EXTI9_5_IRQHandler+0xac>)
 8000426:	6a1b      	ldr	r3, [r3, #32]
 8000428:	4798      	blx	r3
 }
 800042a:	e00e      	b.n	800044a <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,9) ) { SetBit(EXTI->PR,9); GP_IRQ_CALLBACK[9]();}
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI9_5_IRQHandler+0xa2>
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <EXTI9_5_IRQHandler+0xa8>)
 800043e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <EXTI9_5_IRQHandler+0xac>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	4798      	blx	r3
 }
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010400 	.word	0x40010400
 8000454:	20000020 	.word	0x20000020

08000458 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler (void)
 {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 if( ReadBit(EXTI->PR,10) )	 	{ SetBit(EXTI->PR,10); GP_IRQ_CALLBACK[10]();}
 800045c:	4b28      	ldr	r3, [pc, #160]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000464:	2b00      	cmp	r3, #0
 8000466:	d009      	beq.n	800047c <EXTI15_10_IRQHandler+0x24>
 8000468:	4b25      	ldr	r3, [pc, #148]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a24      	ldr	r2, [pc, #144]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800046e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000472:	6153      	str	r3, [r2, #20]
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <EXTI15_10_IRQHandler+0xac>)
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	4798      	blx	r3
	 else if( ReadBit(EXTI->PR,11) ) { SetBit(EXTI->PR,11); GP_IRQ_CALLBACK[11]();}
	 else if( ReadBit(EXTI->PR,12) ) { SetBit(EXTI->PR,12); GP_IRQ_CALLBACK[12]();}
	 else if( ReadBit(EXTI->PR,13) ) { SetBit(EXTI->PR,13); GP_IRQ_CALLBACK[13]();}
	 else if( ReadBit(EXTI->PR,14) ) { SetBit(EXTI->PR,14); GP_IRQ_CALLBACK[14]();}

 }
 800047a:	e03e      	b.n	80004fa <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,11) ) { SetBit(EXTI->PR,11); GP_IRQ_CALLBACK[11]();}
 800047c:	4b20      	ldr	r3, [pc, #128]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000484:	2b00      	cmp	r3, #0
 8000486:	d009      	beq.n	800049c <EXTI15_10_IRQHandler+0x44>
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800048e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000492:	6153      	str	r3, [r2, #20]
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <EXTI15_10_IRQHandler+0xac>)
 8000496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000498:	4798      	blx	r3
 }
 800049a:	e02e      	b.n	80004fa <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,12) ) { SetBit(EXTI->PR,12); GP_IRQ_CALLBACK[12]();}
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d009      	beq.n	80004bc <EXTI15_10_IRQHandler+0x64>
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <EXTI15_10_IRQHandler+0xac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4798      	blx	r3
 }
 80004ba:	e01e      	b.n	80004fa <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,13) ) { SetBit(EXTI->PR,13); GP_IRQ_CALLBACK[13]();}
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d009      	beq.n	80004dc <EXTI15_10_IRQHandler+0x84>
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d2:	6153      	str	r3, [r2, #20]
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <EXTI15_10_IRQHandler+0xac>)
 80004d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d8:	4798      	blx	r3
 }
 80004da:	e00e      	b.n	80004fa <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,14) ) { SetBit(EXTI->PR,14); GP_IRQ_CALLBACK[14]();}
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d008      	beq.n	80004fa <EXTI15_10_IRQHandler+0xa2>
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <EXTI15_10_IRQHandler+0xa8>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <EXTI15_10_IRQHandler+0xac>)
 80004f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f8:	4798      	blx	r3
 }
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40010400 	.word	0x40010400
 8000504:	20000020 	.word	0x20000020

08000508 <MCAL_GPIO_Init>:
  * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
  * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * =================================================================
 */
 void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t PinConfig)
 {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
 	//Enable the RCC on the GPIO port

 	//Initialize the pin mode
 	uint8_t PINNUM = _FindPinNum(PinConfig.GPIO_PinNumber);
 8000512:	883b      	ldrh	r3, [r7, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fc41 	bl	8000d9c <_FindPinNum>
 800051a:	4603      	mov	r3, r0
 800051c:	73fb      	strb	r3, [r7, #15]
 	//Port Configuration register low GPIOx_CRL -> Configure pin 0 to pin 7
 	if(PinConfig.GPIO_PinNumber< GPIO_PIN_8)
 800051e:	883b      	ldrh	r3, [r7, #0]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	f200 8208 	bhi.w	8000936 <MCAL_GPIO_Init+0x42e>
 	{
 		switch(PinConfig.GPIO_MODE)
 8000526:	78bb      	ldrb	r3, [r7, #2]
 8000528:	2b08      	cmp	r3, #8
 800052a:	f200 8410 	bhi.w	8000d4e <MCAL_GPIO_Init+0x846>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <MCAL_GPIO_Init+0x2c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000559 	.word	0x08000559
 8000538:	08000587 	.word	0x08000587
 800053c:	080005c9 	.word	0x080005c9
 8000540:	08000617 	.word	0x08000617
 8000544:	08000667 	.word	0x08000667
 8000548:	08000701 	.word	0x08000701
 800054c:	080007af 	.word	0x080007af
 8000550:	0800085d 	.word	0x0800085d
 8000554:	080008f5 	.word	0x080008f5
 		{
 			case GPIO_MODE_ANALOG:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	7bfa      	ldrb	r2, [r7, #15]
 800055e:	0092      	lsls	r2, r2, #2
 8000560:	2103      	movs	r1, #3
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	43d2      	mvns	r2, r2
 8000568:	401a      	ands	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	7bfa      	ldrb	r2, [r7, #15]
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	210c      	movs	r1, #12
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	43d2      	mvns	r2, r2
 800057e:	401a      	ands	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
 				break;
 8000584:	e3e3      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_FLO:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	43d2      	mvns	r2, r2
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7bfa      	ldrb	r2, [r7, #15]
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	2108      	movs	r1, #8
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	401a      	ands	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	2104      	movs	r1, #4
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	431a      	orrs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
 				break;
 80005c6:	e3c2      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PU:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7bfa      	ldrb	r2, [r7, #15]
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	2104      	movs	r1, #4
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	401a      	ands	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	7bfa      	ldrb	r2, [r7, #15]
 80005fa:	0092      	lsls	r2, r2, #2
 80005fc:	2108      	movs	r1, #8
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
 				(GPIOx->ODR) |=  PinConfig.GPIO_PinNumber;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	883a      	ldrh	r2, [r7, #0]
 800060e:	431a      	orrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]
 				break;
 8000614:	e39b      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PD:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	7bfa      	ldrb	r2, [r7, #15]
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	0092      	lsls	r2, r2, #2
 8000634:	2104      	movs	r1, #4
 8000636:	fa01 f202 	lsl.w	r2, r1, r2
 800063a:	43d2      	mvns	r2, r2
 800063c:	401a      	ands	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7bfa      	ldrb	r2, [r7, #15]
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	2108      	movs	r1, #8
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
 				(GPIOx->ODR) &= ~PinConfig.GPIO_PinNumber;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	883a      	ldrh	r2, [r7, #0]
 800065c:	43d2      	mvns	r2, r2
 800065e:	401a      	ands	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
 				break;
 8000664:	e373      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d032      	beq.n	80006d2 <MCAL_GPIO_Init+0x1ca>
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc3b      	bgt.n	80006e8 <MCAL_GPIO_Init+0x1e0>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <MCAL_GPIO_Init+0x172>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d016      	beq.n	80006a6 <MCAL_GPIO_Init+0x19e>
 8000678:	e036      	b.n	80006e8 <MCAL_GPIO_Init+0x1e0>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	7bfa      	ldrb	r2, [r7, #15]
 8000680:	0092      	lsls	r2, r2, #2
 8000682:	2102      	movs	r1, #2
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	43d2      	mvns	r2, r2
 800068a:	401a      	ands	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
 						break;
 80006a4:	e020      	b.n	80006e8 <MCAL_GPIO_Init+0x1e0>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	2101      	movs	r1, #1
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	401a      	ands	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	7bfa      	ldrb	r2, [r7, #15]
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	2102      	movs	r1, #2
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
 						break;
 80006d0:	e00a      	b.n	80006e8 <MCAL_GPIO_Init+0x1e0>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7bfa      	ldrb	r2, [r7, #15]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
 						break;
 80006e6:	bf00      	nop
 				}
 				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	210c      	movs	r1, #12
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	401a      	ands	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
 				break;
 80006fe:	e326      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d032      	beq.n	800076c <MCAL_GPIO_Init+0x264>
 8000706:	2b02      	cmp	r3, #2
 8000708:	dc3b      	bgt.n	8000782 <MCAL_GPIO_Init+0x27a>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <MCAL_GPIO_Init+0x20c>
 800070e:	2b01      	cmp	r3, #1
 8000710:	d016      	beq.n	8000740 <MCAL_GPIO_Init+0x238>
 8000712:	e036      	b.n	8000782 <MCAL_GPIO_Init+0x27a>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7bfa      	ldrb	r2, [r7, #15]
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	2102      	movs	r1, #2
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	43d2      	mvns	r2, r2
 8000724:	401a      	ands	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	2101      	movs	r1, #1
 8000734:	fa01 f202 	lsl.w	r2, r1, r2
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
 						break;
 800073e:	e020      	b.n	8000782 <MCAL_GPIO_Init+0x27a>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	43d2      	mvns	r2, r2
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	7bfa      	ldrb	r2, [r7, #15]
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	2102      	movs	r1, #2
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
 						break;
 800076a:	e00a      	b.n	8000782 <MCAL_GPIO_Init+0x27a>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
 						break;
 8000780:	bf00      	nop
 				}
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	2108      	movs	r1, #8
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	43d2      	mvns	r2, r2
 8000792:	401a      	ands	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	2104      	movs	r1, #4
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	601a      	str	r2, [r3, #0]
 				break;
 80007ac:	e2cf      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d032      	beq.n	800081a <MCAL_GPIO_Init+0x312>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	dc3b      	bgt.n	8000830 <MCAL_GPIO_Init+0x328>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <MCAL_GPIO_Init+0x2ba>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d016      	beq.n	80007ee <MCAL_GPIO_Init+0x2e6>
 80007c0:	e036      	b.n	8000830 <MCAL_GPIO_Init+0x328>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	2102      	movs	r1, #2
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	401a      	ands	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	0092      	lsls	r2, r2, #2
 80007e0:	2101      	movs	r1, #1
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	431a      	orrs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
 							break;
 80007ec:	e020      	b.n	8000830 <MCAL_GPIO_Init+0x328>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	43d2      	mvns	r2, r2
 80007fe:	401a      	ands	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	7bfa      	ldrb	r2, [r7, #15]
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	2102      	movs	r1, #2
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	431a      	orrs	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	601a      	str	r2, [r3, #0]
 							break;
 8000818:	e00a      	b.n	8000830 <MCAL_GPIO_Init+0x328>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	0092      	lsls	r2, r2, #2
 8000822:	2103      	movs	r1, #3
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	431a      	orrs	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
 							break;
 800082e:	bf00      	nop
 					}
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	2104      	movs	r1, #4
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	43d2      	mvns	r2, r2
 8000840:	401a      	ands	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7bfa      	ldrb	r2, [r7, #15]
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	2108      	movs	r1, #8
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	431a      	orrs	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
 				break;
 800085a:	e278      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d032      	beq.n	80008c8 <MCAL_GPIO_Init+0x3c0>
 8000862:	2b02      	cmp	r3, #2
 8000864:	dc3b      	bgt.n	80008de <MCAL_GPIO_Init+0x3d6>
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <MCAL_GPIO_Init+0x368>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d016      	beq.n	800089c <MCAL_GPIO_Init+0x394>
 800086e:	e036      	b.n	80008de <MCAL_GPIO_Init+0x3d6>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	7bfa      	ldrb	r2, [r7, #15]
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	2102      	movs	r1, #2
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	43d2      	mvns	r2, r2
 8000880:	401a      	ands	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
 							break;
 800089a:	e020      	b.n	80008de <MCAL_GPIO_Init+0x3d6>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7bfa      	ldrb	r2, [r7, #15]
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	401a      	ands	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	2102      	movs	r1, #2
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	431a      	orrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
 							break;
 80008c6:	e00a      	b.n	80008de <MCAL_GPIO_Init+0x3d6>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	2103      	movs	r1, #3
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
 							break;
 80008dc:	bf00      	nop
 					}
 				(GPIOx->CRL) |= (0Xc<<4*PINNUM);   //set two bits in CNF
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	210c      	movs	r1, #12
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	431a      	orrs	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
 				break;
 80008f2:	e22c      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_AF:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	7bfa      	ldrb	r2, [r7, #15]
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	2103      	movs	r1, #3
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	43d2      	mvns	r2, r2
 8000904:	401a      	ands	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	7bfa      	ldrb	r2, [r7, #15]
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	2108      	movs	r1, #8
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	43d2      	mvns	r2, r2
 800091a:	401a      	ands	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	2104      	movs	r1, #4
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
 				break;
 8000934:	e20b      	b.n	8000d4e <MCAL_GPIO_Init+0x846>



 	//Port Configuration register high GPIOx_CRH -> Configure pin 8 to pin 15
 	else{
 		PINNUM = PINNUM - 8;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	3b08      	subs	r3, #8
 800093a:	73fb      	strb	r3, [r7, #15]
 		switch(PinConfig.GPIO_MODE)
 800093c:	78bb      	ldrb	r3, [r7, #2]
 800093e:	2b08      	cmp	r3, #8
 8000940:	f200 8205 	bhi.w	8000d4e <MCAL_GPIO_Init+0x846>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <MCAL_GPIO_Init+0x444>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000971 	.word	0x08000971
 8000950:	0800099f 	.word	0x0800099f
 8000954:	080009e1 	.word	0x080009e1
 8000958:	08000a2f 	.word	0x08000a2f
 800095c:	08000a7f 	.word	0x08000a7f
 8000960:	08000b19 	.word	0x08000b19
 8000964:	08000bc7 	.word	0x08000bc7
 8000968:	08000c75 	.word	0x08000c75
 800096c:	08000d0d 	.word	0x08000d0d
 		{
 			case GPIO_MODE_ANALOG:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	2103      	movs	r1, #3
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	43d2      	mvns	r2, r2
 8000980:	401a      	ands	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	210c      	movs	r1, #12
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	43d2      	mvns	r2, r2
 8000996:	401a      	ands	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
 				break;
 800099c:	e1d7      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_FLO:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	2103      	movs	r1, #3
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	2108      	movs	r1, #8
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	401a      	ands	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	2104      	movs	r1, #4
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	605a      	str	r2, [r3, #4]
 				break;
 80009de:	e1b6      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PU:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	2103      	movs	r1, #3
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	43d2      	mvns	r2, r2
 80009f0:	401a      	ands	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	2104      	movs	r1, #4
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	2108      	movs	r1, #8
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	605a      	str	r2, [r3, #4]
 				(GPIOx->ODR) |=  PinConfig.GPIO_PinNumber;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	883a      	ldrh	r2, [r7, #0]
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60da      	str	r2, [r3, #12]
 				break;
 8000a2c:	e18f      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PD:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	2103      	movs	r1, #3
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	7bfa      	ldrb	r2, [r7, #15]
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	43d2      	mvns	r2, r2
 8000a54:	401a      	ands	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	2108      	movs	r1, #8
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	605a      	str	r2, [r3, #4]
 				(GPIOx->ODR) &= ~PinConfig.GPIO_PinNumber;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	883a      	ldrh	r2, [r7, #0]
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	401a      	ands	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
 				break;
 8000a7c:	e167      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d032      	beq.n	8000aea <MCAL_GPIO_Init+0x5e2>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	dc3b      	bgt.n	8000b00 <MCAL_GPIO_Init+0x5f8>
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <MCAL_GPIO_Init+0x58a>
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d016      	beq.n	8000abe <MCAL_GPIO_Init+0x5b6>
 8000a90:	e036      	b.n	8000b00 <MCAL_GPIO_Init+0x5f8>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	605a      	str	r2, [r3, #4]
 						break;
 8000abc:	e020      	b.n	8000b00 <MCAL_GPIO_Init+0x5f8>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	7bfa      	ldrb	r2, [r7, #15]
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	2102      	movs	r1, #2
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	605a      	str	r2, [r3, #4]
 						break;
 8000ae8:	e00a      	b.n	8000b00 <MCAL_GPIO_Init+0x5f8>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	2103      	movs	r1, #3
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	605a      	str	r2, [r3, #4]
 						break;
 8000afe:	bf00      	nop
 				}
 				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	210c      	movs	r1, #12
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	43d2      	mvns	r2, r2
 8000b10:	401a      	ands	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	605a      	str	r2, [r3, #4]
 				break;
 8000b16:	e11a      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d032      	beq.n	8000b84 <MCAL_GPIO_Init+0x67c>
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	dc3b      	bgt.n	8000b9a <MCAL_GPIO_Init+0x692>
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <MCAL_GPIO_Init+0x624>
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d016      	beq.n	8000b58 <MCAL_GPIO_Init+0x650>
 8000b2a:	e036      	b.n	8000b9a <MCAL_GPIO_Init+0x692>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	2102      	movs	r1, #2
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	43d2      	mvns	r2, r2
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
 						break;
 8000b56:	e020      	b.n	8000b9a <MCAL_GPIO_Init+0x692>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	7bfa      	ldrb	r2, [r7, #15]
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	2101      	movs	r1, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	43d2      	mvns	r2, r2
 8000b68:	401a      	ands	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	2102      	movs	r1, #2
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	605a      	str	r2, [r3, #4]
 						break;
 8000b82:	e00a      	b.n	8000b9a <MCAL_GPIO_Init+0x692>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	605a      	str	r2, [r3, #4]
 						break;
 8000b98:	bf00      	nop
 				}
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	2104      	movs	r1, #4
 8000bba:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	605a      	str	r2, [r3, #4]
 				break;
 8000bc4:	e0c3      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d032      	beq.n	8000c32 <MCAL_GPIO_Init+0x72a>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc3b      	bgt.n	8000c48 <MCAL_GPIO_Init+0x740>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <MCAL_GPIO_Init+0x6d2>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d016      	beq.n	8000c06 <MCAL_GPIO_Init+0x6fe>
 8000bd8:	e036      	b.n	8000c48 <MCAL_GPIO_Init+0x740>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	2102      	movs	r1, #2
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	605a      	str	r2, [r3, #4]
 							break;
 8000c04:	e020      	b.n	8000c48 <MCAL_GPIO_Init+0x740>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	2101      	movs	r1, #1
 8000c10:	fa01 f202 	lsl.w	r2, r1, r2
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	2102      	movs	r1, #2
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	605a      	str	r2, [r3, #4]
 							break;
 8000c30:	e00a      	b.n	8000c48 <MCAL_GPIO_Init+0x740>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	605a      	str	r2, [r3, #4]
 							break;
 8000c46:	bf00      	nop
 					}
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	2104      	movs	r1, #4
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	43d2      	mvns	r2, r2
 8000c58:	401a      	ands	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	2108      	movs	r1, #8
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	605a      	str	r2, [r3, #4]
 				break;
 8000c72:	e06c      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d032      	beq.n	8000ce0 <MCAL_GPIO_Init+0x7d8>
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dc3b      	bgt.n	8000cf6 <MCAL_GPIO_Init+0x7ee>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <MCAL_GPIO_Init+0x780>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d016      	beq.n	8000cb4 <MCAL_GPIO_Init+0x7ac>
 8000c86:	e036      	b.n	8000cf6 <MCAL_GPIO_Init+0x7ee>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	2102      	movs	r1, #2
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	43d2      	mvns	r2, r2
 8000c98:	401a      	ands	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	605a      	str	r2, [r3, #4]
 							break;
 8000cb2:	e020      	b.n	8000cf6 <MCAL_GPIO_Init+0x7ee>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	43d2      	mvns	r2, r2
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	605a      	str	r2, [r3, #4]
 							break;
 8000cde:	e00a      	b.n	8000cf6 <MCAL_GPIO_Init+0x7ee>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	2103      	movs	r1, #3
 8000cea:	fa01 f202 	lsl.w	r2, r1, r2
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
 							break;
 8000cf4:	bf00      	nop
 					}
 				(GPIOx->CRH) |= (0Xc<<4*PINNUM);   //set two bits in CNF
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	210c      	movs	r1, #12
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	605a      	str	r2, [r3, #4]
 				break;
 8000d0a:	e020      	b.n	8000d4e <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_AF:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	2103      	movs	r1, #3
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	2104      	movs	r1, #4
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	605a      	str	r2, [r3, #4]
 				break;
 8000d4c:	bf00      	nop
 		}
 	}
 }
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop

08000d58 <MCAL_GPIO_Write_PIN>:
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Write_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber,uint8_t Value)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
	switch (Value)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <MCAL_GPIO_Write_PIN+0x1c>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d008      	beq.n	8000d84 <MCAL_GPIO_Write_PIN+0x2c>
		case GPIO_PIN_HIGH:
			//Set the pin
			(GPIOx->ODR) |= PinNumber;
			break;
		default:
			break;
 8000d72:	e00e      	b.n	8000d92 <MCAL_GPIO_Write_PIN+0x3a>
			(GPIOx->ODR) &= ~PinNumber;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	887a      	ldrh	r2, [r7, #2]
 8000d7a:	43d2      	mvns	r2, r2
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
			break;
 8000d82:	e006      	b.n	8000d92 <MCAL_GPIO_Write_PIN+0x3a>
			(GPIOx->ODR) |= PinNumber;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	60da      	str	r2, [r3, #12]
			break;
 8000d90:	bf00      	nop
	}

}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <_FindPinNum>:
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint8_t _FindPinNum (uint16_t PinNumber)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	int counter=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
	while(PinNumber){
 8000daa:	e005      	b.n	8000db8 <_FindPinNum+0x1c>
		counter ++;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
		PinNumber = (PinNumber>>1);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	80fb      	strh	r3, [r7, #6]
	while(PinNumber){
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f6      	bne.n	8000dac <_FindPinNum+0x10>
	}
	return counter-1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <MCAL_RCC_GetSYS_CLKFreq>:
  *
  * Note			-NONE
  * =================================================================
  */
 uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
 {
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	 switch((RCC->CFGR >> 2)& 0b11)
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d00a      	beq.n	8000df8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d80a      	bhi.n	8000dfc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d002      	beq.n	8000df4 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000dee:	e005      	b.n	8000dfc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	 {
	 	 case 0:
	 		 return HSI_RC_CLK;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000df2:	e004      	b.n	8000dfe <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	 		 break;

	 	 case 1:
	 		 return HSE_Clock;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000df6:	e002      	b.n	8000dfe <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	 		 break;

	 	 case 2:
	 		 return 16000000;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000dfa:	e000      	b.n	8000dfe <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	 		 break;

	 	 default:
	 		 return 0;
 8000dfc:	2300      	movs	r3, #0
	 		 break;
	 }
 }
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	007a1200 	.word	0x007a1200
 8000e10:	00f42400 	.word	0x00f42400

08000e14 <MCAL_RCC_GetHCLKFreq>:
  *
  * Note			-NONE
  * =================================================================
  */
 uint32_t MCAL_RCC_GetHCLKFreq(void)
 {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	 return ( MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR>>4) & 0b1111] );
 8000e18:	f7ff ffda 	bl	8000dd0 <MCAL_RCC_GetSYS_CLKFreq>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	4903      	ldr	r1, [pc, #12]	; (8000e38 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 }
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	0800161c 	.word	0x0800161c

08000e3c <MCAL_RCC_GetPCLK1Freq>:
  *
  * Note			-NONE
  * =================================================================
  */
 uint32_t MCAL_RCC_GetPCLK1Freq(void)
 {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	 return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR>>8)&0b111] );
 8000e40:	f7ff ffe8 	bl	8000e14 <MCAL_RCC_GetHCLKFreq>
 8000e44:	4602      	mov	r2, r0
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	4903      	ldr	r1, [pc, #12]	; (8000e60 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000e52:	5ccb      	ldrb	r3, [r1, r3]
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 }
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	08001614 	.word	0x08001614

08000e64 <MCAL_RCC_GetPCLK2Freq>:
  *
  * Note			-NONE
  * =================================================================
  */
 uint32_t MCAL_RCC_GetPCLK2Freq(void)
 {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	 return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR>>11)&0b111] );
 8000e68:	f7ff ffd4 	bl	8000e14 <MCAL_RCC_GetHCLKFreq>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	0adb      	lsrs	r3, r3, #11
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	4903      	ldr	r1, [pc, #12]	; (8000e88 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000e7a:	5ccb      	ldrb	r3, [r1, r3]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 }
 8000e80:	4618      	mov	r0, r3
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08001614 	.word	0x08001614

08000e8c <MCAL_SPI_Init>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_SPI_Init (SPI_TypeDef * SPIx , SPI_Config_t * SPI_Config)
 {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	 //Safety for register to write the configuration to it then write it to the registers later
	 uint16_t tmpreg_CR1 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	81fb      	strh	r3, [r7, #14]
	 uint16_t tmpreg_CR2 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81bb      	strh	r3, [r7, #12]

	 //enable the Clock for given SPI peripheral
	 if(SPIx == SPI1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a42      	ldr	r2, [pc, #264]	; (8000fac <MCAL_SPI_Init+0x120>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d109      	bne.n	8000eba <MCAL_SPI_Init+0x2e>
	 {
		 _SPI_Config[SPI1_INDEX] = SPI_Config ;
 8000ea6:	4a42      	ldr	r2, [pc, #264]	; (8000fb0 <MCAL_SPI_Init+0x124>)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6013      	str	r3, [r2, #0]
		 RCC_SPI1_CLK_EN();
 8000eac:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <MCAL_SPI_Init+0x128>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a40      	ldr	r2, [pc, #256]	; (8000fb4 <MCAL_SPI_Init+0x128>)
 8000eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	e00c      	b.n	8000ed4 <MCAL_SPI_Init+0x48>
	 }
	 else if (SPIx == SPI2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <MCAL_SPI_Init+0x12c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d108      	bne.n	8000ed4 <MCAL_SPI_Init+0x48>
	 {
		 _SPI_Config[SPI2_INDEX] = SPI_Config ;
 8000ec2:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <MCAL_SPI_Init+0x124>)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6053      	str	r3, [r2, #4]
		 RCC_SPI2_CLK_EN();
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <MCAL_SPI_Init+0x128>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a39      	ldr	r2, [pc, #228]	; (8000fb4 <MCAL_SPI_Init+0x128>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	61d3      	str	r3, [r2, #28]
	 }

	 //Enable the SPI Module
	 // CR1 Register Bit 6
	 tmpreg_CR1 = (1<<6);
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	81fb      	strh	r3, [r7, #14]

	 //Master or Slave
	 tmpreg_CR1 |= SPI_Config->SPI_DEVICE_MODE;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	89fb      	ldrh	r3, [r7, #14]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	81fb      	strh	r3, [r7, #14]

	 //SPI_Communication mode
	 tmpreg_CR1 |= SPI_Config->SPI_COMM_MODE;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	885a      	ldrh	r2, [r3, #2]
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	81fb      	strh	r3, [r7, #14]

	 //SPI_Frame_Format
	 tmpreg_CR1 |= SPI_Config->SPI_FRAME_FORMAT;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	889a      	ldrh	r2, [r3, #4]
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	81fb      	strh	r3, [r7, #14]

	 //SPI Data size
	 tmpreg_CR1 |= SPI_Config->SPI_DATA_SIZE;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	88da      	ldrh	r2, [r3, #6]
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	81fb      	strh	r3, [r7, #14]

	 //SPI Clock Polarity
	 tmpreg_CR1 |= SPI_Config->SPI_CLK_POLARITY;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	891a      	ldrh	r2, [r3, #8]
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	81fb      	strh	r3, [r7, #14]

	 //SPI Clock Phase
	 tmpreg_CR1 |= SPI_Config->SPI_CLK_PHASE;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	895a      	ldrh	r2, [r3, #10]
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	81fb      	strh	r3, [r7, #14]

	 //========================NSS=====================
	 if (SPI_Config->SPI_NSS == SPI_NSS_HW_MASTER_SS_OUT_EN)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	89db      	ldrh	r3, [r3, #14]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d105      	bne.n	8000f28 <MCAL_SPI_Init+0x9c>
	 {
		 tmpreg_CR2 |= SPI_Config->SPI_NSS ;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	89da      	ldrh	r2, [r3, #14]
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	81bb      	strh	r3, [r7, #12]
 8000f26:	e013      	b.n	8000f50 <MCAL_SPI_Init+0xc4>
	 }
	 else if (SPI_Config->SPI_NSS == SPI_NSS_HW_MASTER_SS_OUT_DIS)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	89db      	ldrh	r3, [r3, #14]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10a      	bne.n	8000f46 <MCAL_SPI_Init+0xba>
	 {
		 tmpreg_CR2 &= ~(SPI_Config->SPI_NSS) ;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	89db      	ldrh	r3, [r3, #14]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	81bb      	strh	r3, [r7, #12]
 8000f44:	e004      	b.n	8000f50 <MCAL_SPI_Init+0xc4>
	 }
	 else
	 {
		 tmpreg_CR1 |= SPI_Config->SPI_NSS ;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	89da      	ldrh	r2, [r3, #14]
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	81fb      	strh	r3, [r7, #14]
	 }
	 //SPI_BAUDRATEPRESCALER
	 tmpreg_CR1 |= SPI_Config->SPI_BR_PRESC;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	8a1a      	ldrh	r2, [r3, #16]
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	81fb      	strh	r3, [r7, #14]

	 if(SPI_Config->SPI_IRQ_ENABLE != SPI_IRQ_ENABLE_NONE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	899b      	ldrh	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <MCAL_SPI_Init+0x10a>
	 {
		 //SPI_IRQ_Enable_define
		 tmpreg_CR2 |= SPI_Config->SPI_IRQ_ENABLE;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	899a      	ldrh	r2, [r3, #12]
 8000f66:	89bb      	ldrh	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	81bb      	strh	r3, [r7, #12]
		 if(SPIx == SPI1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <MCAL_SPI_Init+0x120>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <MCAL_SPI_Init+0xf6>
		 {
			 NVIC_IRQ35_SPI1_EN();
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MCAL_SPI_Init+0x130>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <MCAL_SPI_Init+0x130>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e009      	b.n	8000f96 <MCAL_SPI_Init+0x10a>
		 }
		 else if (SPIx == SPI2)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <MCAL_SPI_Init+0x12c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d105      	bne.n	8000f96 <MCAL_SPI_Init+0x10a>
		 {
			 NVIC_IRQ36_SPI2_EN();
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MCAL_SPI_Init+0x130>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <MCAL_SPI_Init+0x130>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6013      	str	r3, [r2, #0]
		 }
	 }
	 SPI1->CR1 = tmpreg_CR1 ;
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <MCAL_SPI_Init+0x120>)
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	6013      	str	r3, [r2, #0]
	 SPI1->CR2 = tmpreg_CR2 ;
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <MCAL_SPI_Init+0x120>)
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	6053      	str	r3, [r2, #4]

 }
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	2000005c 	.word	0x2000005c
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40003800 	.word	0x40003800
 8000fbc:	e000e104 	.word	0xe000e104

08000fc0 <MCAL_SPI_TX_RX>:
  *
  * Note			-NONE
  * =================================================================
  */
 void  MCAL_SPI_TX_RX (SPI_TypeDef * SPIx , uint16_t * pTXBuffer , enum SPI_Polling_Mechanism PollingEN)
 {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
	 //Wait till TXE flag is set in the SR
	 if (PollingEN == SPI_POLL_enable)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d106      	bne.n	8000fe2 <MCAL_SPI_TX_RX+0x22>
	 {
		 while(! (SPIx->SR & SPI_SR_TXE ) ) ;
 8000fd4:	bf00      	nop
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f9      	beq.n	8000fd6 <MCAL_SPI_TX_RX+0x16>
	 }
	 //SPI is ready to send data
	 SPIx->DR = *pTXBuffer;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	60da      	str	r2, [r3, #12]

	 //wait till RXNE flag is set in the SR
	 if(PollingEN == SPI_POLL_enable)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d106      	bne.n	8001000 <MCAL_SPI_TX_RX+0x40>
	 {
		 while( !(SPIx->SR & SPI_SR_RXNE));
 8000ff2:	bf00      	nop
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <MCAL_SPI_TX_RX+0x34>
	 }
	 *pTXBuffer = SPIx->DR;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	b29a      	uxth	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	801a      	strh	r2, [r3, #0]
 }
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <MCAL_SPI_GPIO_Set_Pins>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef * SPIx )
 {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	 if (SPIx == SPI1 )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a73      	ldr	r2, [pc, #460]	; (80011ec <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d16d      	bne.n	8001100 <MCAL_SPI_GPIO_Set_Pins+0xec>
		 //PA5   SPI1_SCK
		 //PA6   SPI1_MISO
		 //PA7   SPI1_MOSI

		 //PA4  SPI1_NSS
		 if(_SPI_Config[SPI1_INDEX]->SPI_DEVICE_MODE == SPI_DEVICE_MODE_MASTER)
 8001024:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d13d      	bne.n	80010aa <MCAL_SPI_GPIO_Set_Pins+0x96>
		 {
			 //PA4 : SPI1_NSS
			 switch (_SPI_Config[SPI1_INDEX]->SPI_NSS)
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	89db      	ldrh	r3, [r3, #14]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <MCAL_SPI_GPIO_Set_Pins+0x2a>
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00a      	beq.n	8001052 <MCAL_SPI_GPIO_Set_Pins+0x3e>
 800103c:	e015      	b.n	800106a <MCAL_SPI_GPIO_Set_Pins+0x56>
			 {
			 	 case SPI_NSS_HW_MASTER_SS_OUT_DIS:

					 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	81bb      	strh	r3, [r7, #12]
					 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001044:	2301      	movs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
					 MCAL_GPIO_Init(GPIOA, PinCfg);
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	486a      	ldr	r0, [pc, #424]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800104c:	f7ff fa5c 	bl	8000508 <MCAL_GPIO_Init>

			 		 break;
 8001050:	e00b      	b.n	800106a <MCAL_SPI_GPIO_Set_Pins+0x56>

			 	 case SPI_NSS_HW_MASTER_SS_OUT_EN:
					 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	81bb      	strh	r3, [r7, #12]
					 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001058:	2306      	movs	r3, #6
 800105a:	73bb      	strb	r3, [r7, #14]
					 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
					 MCAL_GPIO_Init(GPIOA, PinCfg);
 8001060:	68f9      	ldr	r1, [r7, #12]
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8001064:	f7ff fa50 	bl	8000508 <MCAL_GPIO_Init>

			 		 break;
 8001068:	bf00      	nop
			 }
			 //PA5 : SPI1_CLK
			 PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800106a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106e:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001070:	2306      	movs	r3, #6
 8001072:	73bb      	strb	r3, [r7, #14]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	485e      	ldr	r0, [pc, #376]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800107c:	f7ff fa44 	bl	8000508 <MCAL_GPIO_Init>

			 //PA6 : SPI1_MISO
			 PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8001080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001084:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001086:	2301      	movs	r3, #1
 8001088:	73bb      	strb	r3, [r7, #14]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4859      	ldr	r0, [pc, #356]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800108e:	f7ff fa3b 	bl	8000508 <MCAL_GPIO_Init>

			 //PA7 : SPI1_MOSI
			 PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8001092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001096:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001098:	2306      	movs	r3, #6
 800109a:	73bb      	strb	r3, [r7, #14]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	4854      	ldr	r0, [pc, #336]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80010a4:	f7ff fa30 	bl	8000508 <MCAL_GPIO_Init>
 80010a8:	e02a      	b.n	8001100 <MCAL_SPI_GPIO_Set_Pins+0xec>

		 }
		 else // Slave
		 {
			 //PA4 : SPI1_NSS
			 if (_SPI_Config[SPI1_INDEX]->SPI_NSS == SPI_NSS_HW_SLAVE)
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	89db      	ldrh	r3, [r3, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <MCAL_SPI_GPIO_Set_Pins+0xb2>
			 {
				 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	81bb      	strh	r3, [r7, #12]
				 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
				 MCAL_GPIO_Init(GPIOA, PinCfg);
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	484c      	ldr	r0, [pc, #304]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80010c2:	f7ff fa21 	bl	8000508 <MCAL_GPIO_Init>
			 }

			 //PA5 : SPI1_CLK
			 PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	4848      	ldr	r0, [pc, #288]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80010d4:	f7ff fa18 	bl	8000508 <MCAL_GPIO_Init>

			 //PA6 : SPI1_MISO
			 PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80010d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010dc:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80010de:	2306      	movs	r3, #6
 80010e0:	73bb      	strb	r3, [r7, #14]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	4842      	ldr	r0, [pc, #264]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80010ea:	f7ff fa0d 	bl	8000508 <MCAL_GPIO_Init>

			 //PA7 : SPI1_MOSI
			 PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80010ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f2:	81bb      	strh	r3, [r7, #12]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
			 MCAL_GPIO_Init(GPIOA, PinCfg);
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	483e      	ldr	r0, [pc, #248]	; (80011f4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80010fc:	f7ff fa04 	bl	8000508 <MCAL_GPIO_Init>
		 }



	 }
	 if (SPIx == SPI2 )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d16d      	bne.n	80011e4 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
		 GPIO_PinConfig_t PinCfg;
		 //PB12  SPI2_NSS
		 //PB13  SPI2_SCK
		 //PB14  SPI2_MISO
		 //PB15  SPI2_MOSI
		 if(_SPI_Config[SPI1_INDEX]->SPI_DEVICE_MODE == SPI_DEVICE_MODE_MASTER)
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d13d      	bne.n	800118e <MCAL_SPI_GPIO_Set_Pins+0x17a>
		 {
			 //PB12 : SPI1_NSS
			 switch (_SPI_Config[SPI1_INDEX]->SPI_NSS)
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	89db      	ldrh	r3, [r3, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <MCAL_SPI_GPIO_Set_Pins+0x10e>
 800111c:	2b04      	cmp	r3, #4
 800111e:	d00a      	beq.n	8001136 <MCAL_SPI_GPIO_Set_Pins+0x122>
 8001120:	e015      	b.n	800114e <MCAL_SPI_GPIO_Set_Pins+0x13a>
			 {
			 	 case SPI_NSS_HW_MASTER_SS_OUT_DIS:

					 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	813b      	strh	r3, [r7, #8]
					 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001128:	2301      	movs	r3, #1
 800112a:	72bb      	strb	r3, [r7, #10]
					 MCAL_GPIO_Init(GPIOB, PinCfg);
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	4833      	ldr	r0, [pc, #204]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001130:	f7ff f9ea 	bl	8000508 <MCAL_GPIO_Init>

			 		 break;
 8001134:	e00b      	b.n	800114e <MCAL_SPI_GPIO_Set_Pins+0x13a>

			 	 case SPI_NSS_HW_MASTER_SS_OUT_EN:
					 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	813b      	strh	r3, [r7, #8]
					 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800113c:	2306      	movs	r3, #6
 800113e:	72bb      	strb	r3, [r7, #10]
					 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001140:	2300      	movs	r3, #0
 8001142:	72fb      	strb	r3, [r7, #11]
					 MCAL_GPIO_Init(GPIOB, PinCfg);
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001148:	f7ff f9de 	bl	8000508 <MCAL_GPIO_Init>

			 		 break;
 800114c:	bf00      	nop
			 }
			 //PB13 : SPI1_CLK
			 PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001154:	2306      	movs	r3, #6
 8001156:	72bb      	strb	r3, [r7, #10]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001158:	2300      	movs	r3, #0
 800115a:	72fb      	strb	r3, [r7, #11]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	4827      	ldr	r0, [pc, #156]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001160:	f7ff f9d2 	bl	8000508 <MCAL_GPIO_Init>

			 //PB14 : SPI1_MISO
			 PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8001164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001168:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800116a:	2301      	movs	r3, #1
 800116c:	72bb      	strb	r3, [r7, #10]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4822      	ldr	r0, [pc, #136]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001172:	f7ff f9c9 	bl	8000508 <MCAL_GPIO_Init>

			 //PB15 : SPI1_MOSI
			 PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8001176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117a:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800117c:	2306      	movs	r3, #6
 800117e:	72bb      	strb	r3, [r7, #10]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001180:	2300      	movs	r3, #0
 8001182:	72fb      	strb	r3, [r7, #11]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001188:	f7ff f9be 	bl	8000508 <MCAL_GPIO_Init>
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			 MCAL_GPIO_Init(GPIOB, PinCfg);

		 }
	 }
 }
 800118c:	e02a      	b.n	80011e4 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
			 if (_SPI_Config[SPI1_INDEX]->SPI_NSS == SPI_NSS_HW_SLAVE)
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	89db      	ldrh	r3, [r3, #14]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <MCAL_SPI_GPIO_Set_Pins+0x196>
				 PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	813b      	strh	r3, [r7, #8]
				 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800119e:	2301      	movs	r3, #1
 80011a0:	72bb      	strb	r3, [r7, #10]
				 MCAL_GPIO_Init(GPIOB, PinCfg);
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80011a6:	f7ff f9af 	bl	8000508 <MCAL_GPIO_Init>
			 PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80011b0:	2301      	movs	r3, #1
 80011b2:	72bb      	strb	r3, [r7, #10]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80011b8:	f7ff f9a6 	bl	8000508 <MCAL_GPIO_Init>
			 PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80011bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c0:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80011c2:	2306      	movs	r3, #6
 80011c4:	72bb      	strb	r3, [r7, #10]
			 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80011c6:	2300      	movs	r3, #0
 80011c8:	72fb      	strb	r3, [r7, #11]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80011ce:	f7ff f99b 	bl	8000508 <MCAL_GPIO_Init>
			 PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80011d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d6:	813b      	strh	r3, [r7, #8]
			 PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80011d8:	2301      	movs	r3, #1
 80011da:	72bb      	strb	r3, [r7, #10]
			 MCAL_GPIO_Init(GPIOB, PinCfg);
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80011e0:	f7ff f992 	bl	8000508 <MCAL_GPIO_Init>
 }
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013000 	.word	0x40013000
 80011f0:	2000005c 	.word	0x2000005c
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40003800 	.word	0x40003800
 80011fc:	40010c00 	.word	0x40010c00

08001200 <SPI1_IRQHandler>:
 //========================================================================
 //								ISR Functions
 //========================================================================

void SPI1_IRQHandler (void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE =  ( (SPI1->SR & (1<<1)) >> 1);
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <SPI1_IRQHandler+0x54>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	793b      	ldrb	r3, [r7, #4]
 8001214:	f362 0300 	bfi	r3, r2, #0, #1
 8001218:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >> 0);
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <SPI1_IRQHandler+0x54>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	793b      	ldrb	r3, [r7, #4]
 8001226:	f362 0341 	bfi	r3, r2, #1, #1
 800122a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >> 4);
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <SPI1_IRQHandler+0x54>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	793b      	ldrb	r3, [r7, #4]
 800123a:	f362 0382 	bfi	r3, r2, #2, #1
 800123e:	713b      	strb	r3, [r7, #4]

	_SPI_Config[SPI1_INDEX]->P_IRQ_CALLBACK(irq_src) ;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SPI1_IRQHandler+0x58>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	7938      	ldrb	r0, [r7, #4]
 8001248:	4798      	blx	r3
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013000 	.word	0x40013000
 8001258:	2000005c 	.word	0x2000005c

0800125c <SPI2_IRQHandler>:


void SPI2_IRQHandler (void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE =  ( (SPI2->SR & (1<<1)) >> 1);
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <SPI2_IRQHandler+0x54>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	f362 0300 	bfi	r3, r2, #0, #1
 8001274:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1<<0)) >> 0);
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <SPI2_IRQHandler+0x54>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	793b      	ldrb	r3, [r7, #4]
 8001282:	f362 0341 	bfi	r3, r2, #1, #1
 8001286:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1<<4)) >> 4);
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <SPI2_IRQHandler+0x54>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	793b      	ldrb	r3, [r7, #4]
 8001296:	f362 0382 	bfi	r3, r2, #2, #1
 800129a:	713b      	strb	r3, [r7, #4]

	 _SPI_Config[SPI2_INDEX]->P_IRQ_CALLBACK(irq_src) ;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SPI2_IRQHandler+0x58>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	7938      	ldrb	r0, [r7, #4]
 80012a4:	4798      	blx	r3
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40003800 	.word	0x40003800
 80012b4:	2000005c 	.word	0x2000005c

080012b8 <MCAL_UART_Init>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_UART_Init (USART_TypeDef * USARTx , UART_Config_t * UART_Config)
 {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	 uint32_t pclk , BRR;

	 _UART_Config = UART_Config;
 80012c2:	4a69      	ldr	r2, [pc, #420]	; (8001468 <MCAL_UART_Init+0x1b0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6013      	str	r3, [r2, #0]
	 //enable the Clock for given USART peripheral
	 if(USARTx == USART1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a68      	ldr	r2, [pc, #416]	; (800146c <MCAL_UART_Init+0x1b4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d106      	bne.n	80012de <MCAL_UART_Init+0x26>
		 RCC_USART1_CLK_EN();
 80012d0:	4b67      	ldr	r3, [pc, #412]	; (8001470 <MCAL_UART_Init+0x1b8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a66      	ldr	r2, [pc, #408]	; (8001470 <MCAL_UART_Init+0x1b8>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	e014      	b.n	8001308 <MCAL_UART_Init+0x50>
	 else if (USARTx == USART2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a64      	ldr	r2, [pc, #400]	; (8001474 <MCAL_UART_Init+0x1bc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d106      	bne.n	80012f4 <MCAL_UART_Init+0x3c>
		 RCC_USART2_CLK_EN();
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <MCAL_UART_Init+0x1b8>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a61      	ldr	r2, [pc, #388]	; (8001470 <MCAL_UART_Init+0x1b8>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	e009      	b.n	8001308 <MCAL_UART_Init+0x50>
	 else if (USARTx == USART3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a60      	ldr	r2, [pc, #384]	; (8001478 <MCAL_UART_Init+0x1c0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d105      	bne.n	8001308 <MCAL_UART_Init+0x50>
		 RCC_USART3_CLK_EN();
 80012fc:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <MCAL_UART_Init+0x1b8>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a5b      	ldr	r2, [pc, #364]	; (8001470 <MCAL_UART_Init+0x1b8>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001306:	61d3      	str	r3, [r2, #28]

	 //Enable the USART Module
	 // Bit 13 UE: USART enable
	 USARTx->CR1 |= 1 <<13;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]

	 //Enable USART TX and RX according to the USART_Mode configuration item
	 //USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	 USARTx->CR1 |= UART_Config->USART_MODE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]

	 //Payload Width
	 //USARTx->CR1 Bit 12 M: Word length
	 USARTx->CR1 |= UART_Config->USART_PAYLOAD_LENGTH;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	7a12      	ldrb	r2, [r2, #8]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]

	 //Parity control bit fields
	 //USARTx->CR1 Bit 10 PCE: Parity control enable Bit 9 PS: Parity selection
	 USARTx->CR1 |= UART_Config->USART_PARITY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	7a52      	ldrb	r2, [r2, #9]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60da      	str	r2, [r3, #12]

	 //Stop bits
	 //USARTx->CR2 Bit 13:12 STOP: STOP bits
	 USARTx->CR2 |= UART_Config->USART_STOP;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	7a92      	ldrb	r2, [r2, #10]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	611a      	str	r2, [r3, #16]

	 //Hardware flow control
	 //USART_CR3 Bit 9 CTSE: CTS enable Bit 8 RTSE: RTS enable
	 USARTx->CR3 |= UART_Config->USART_FLWCTRL;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	7ad2      	ldrb	r2, [r2, #11]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	615a      	str	r2, [r3, #20]

	 //Configure the baudrate
	 //PCLK1 for USART2 , 3
	 //PCLK2 for USART1
	 if		 (USARTx == USART1) pclk = MCAL_RCC_GetPCLK2Freq();
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a43      	ldr	r2, [pc, #268]	; (800146c <MCAL_UART_Init+0x1b4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d103      	bne.n	800136a <MCAL_UART_Init+0xb2>
 8001362:	f7ff fd7f 	bl	8000e64 <MCAL_RCC_GetPCLK2Freq>
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	e006      	b.n	8001378 <MCAL_UART_Init+0xc0>
	 else if (USARTx == USART2) pclk = MCAL_RCC_GetPCLK1Freq();
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a41      	ldr	r2, [pc, #260]	; (8001474 <MCAL_UART_Init+0x1bc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d102      	bne.n	8001378 <MCAL_UART_Init+0xc0>
 8001372:	f7ff fd63 	bl	8000e3c <MCAL_RCC_GetPCLK1Freq>
 8001376:	60f8      	str	r0, [r7, #12]

	 BRR = UART_BRR_Register(pclk , UART_Config->USART_BAUDRATE);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	0119      	lsls	r1, r3, #4
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009a      	lsls	r2, r3, #2
 8001390:	441a      	add	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fbb2 f2f3 	udiv	r2, r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a8:	2064      	movs	r0, #100	; 0x64
 80013aa:	fb00 f303 	mul.w	r3, r0, r3
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4a32      	ldr	r2, [pc, #200]	; (800147c <MCAL_UART_Init+0x1c4>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	430b      	orrs	r3, r1
 80013c0:	60bb      	str	r3, [r7, #8]

	 USARTx->BRR = BRR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	609a      	str	r2, [r3, #8]

	 //ENABLE / DISABLE Interrupt
	 if (UART_Config->USART_IRQ_ENABLE != USART_IRQ_ENABLE_NONE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	7b1b      	ldrb	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d027      	beq.n	8001420 <MCAL_UART_Init+0x168>
	 {
		 USARTx->CR1 |= (UART_Config->USART_IRQ_ENABLE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	7b12      	ldrb	r2, [r2, #12]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60da      	str	r2, [r3, #12]
		 //Enable NVIC For USARTx IRQ
		 if (USARTx == USART1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <MCAL_UART_Init+0x1b4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d106      	bne.n	80013f4 <MCAL_UART_Init+0x13c>
			 NVIC_IRQ37_USART1_EN();
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MCAL_UART_Init+0x1c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <MCAL_UART_Init+0x1c8>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	6013      	str	r3, [r2, #0]
		 else if (USARTx == USART3)
			 NVIC_IRQ39_USART3_DIS();

	 }

 }
 80013f2:	e035      	b.n	8001460 <MCAL_UART_Init+0x1a8>
		 else if (USARTx == USART2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <MCAL_UART_Init+0x1bc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d106      	bne.n	800140a <MCAL_UART_Init+0x152>
			 NVIC_IRQ38_USART2_EN();
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MCAL_UART_Init+0x1c8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <MCAL_UART_Init+0x1c8>)
 8001402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001406:	6013      	str	r3, [r2, #0]
 }
 8001408:	e02a      	b.n	8001460 <MCAL_UART_Init+0x1a8>
		 else if (USARTx == USART3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <MCAL_UART_Init+0x1c0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d126      	bne.n	8001460 <MCAL_UART_Init+0x1a8>
			 NVIC_IRQ39_USART3_EN();
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MCAL_UART_Init+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <MCAL_UART_Init+0x1c8>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6013      	str	r3, [r2, #0]
 }
 800141e:	e01f      	b.n	8001460 <MCAL_UART_Init+0x1a8>
		 if (USARTx == USART1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MCAL_UART_Init+0x1b4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d106      	bne.n	8001436 <MCAL_UART_Init+0x17e>
			 NVIC_IRQ37_USART1_DIS();
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MCAL_UART_Init+0x1cc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MCAL_UART_Init+0x1cc>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	6013      	str	r3, [r2, #0]
 }
 8001434:	e014      	b.n	8001460 <MCAL_UART_Init+0x1a8>
		 else if (USARTx == USART2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <MCAL_UART_Init+0x1bc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <MCAL_UART_Init+0x194>
			 NVIC_IRQ38_USART2_DIS();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MCAL_UART_Init+0x1cc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <MCAL_UART_Init+0x1cc>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	6013      	str	r3, [r2, #0]
 }
 800144a:	e009      	b.n	8001460 <MCAL_UART_Init+0x1a8>
		 else if (USARTx == USART3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <MCAL_UART_Init+0x1c0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d105      	bne.n	8001460 <MCAL_UART_Init+0x1a8>
			 NVIC_IRQ39_USART3_DIS();
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MCAL_UART_Init+0x1cc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <MCAL_UART_Init+0x1cc>)
 800145a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145e:	6013      	str	r3, [r2, #0]
 }
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000064 	.word	0x20000064
 800146c:	40013800 	.word	0x40013800
 8001470:	40021000 	.word	0x40021000
 8001474:	40004400 	.word	0x40004400
 8001478:	40004800 	.word	0x40004800
 800147c:	51eb851f 	.word	0x51eb851f
 8001480:	e000e104 	.word	0xe000e104
 8001484:	e000e184 	.word	0xe000e184

08001488 <MCAL_UART_SendData>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t * pTXBuffer , enum Polling_Mechanism PollingEN)
 {
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	71fb      	strb	r3, [r7, #7]
	 //Wait till TXE flag is set in the SR
	 if (PollingEN == enable)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <MCAL_UART_SendData+0x22>
	 {
		 while(! (USARTx->SR & 1<<7 ) ) ;
 800149c:	bf00      	nop
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f9      	beq.n	800149e <MCAL_UART_SendData+0x16>
	 }

	 //Check the USART_WordLength item for 9 Bit or 8 Bit in a Frame
	 if (_UART_Config->USART_PAYLOAD_LENGTH == USART_PAYLOAD_LENGTH_9Bits)
		 USARTx->DR =  *pTXBuffer & (uint16_t)0x1FF ;
	 else if (_UART_Config->USART_PAYLOAD_LENGTH == USART_PAYLOAD_LENGTH_8Bits)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MCAL_UART_SendData+0x40>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	7a1b      	ldrb	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <MCAL_UART_SendData+0x36>
		 USARTx->DR =  *pTXBuffer & (uint16_t)0xFF ;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	605a      	str	r2, [r3, #4]

 }
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000064 	.word	0x20000064

080014cc <MCAL_UART_ReceiveData>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_UART_ReceiveData(USART_TypeDef * USARTx , uint16_t * pRXBuffer , enum Polling_Mechanism PollingEN )
 {
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
	 //wait till RXNE flag is set in the SR
	 if(PollingEN == enable)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <MCAL_UART_ReceiveData+0x22>
	 {
		 while( !(USARTx->SR & 1<<5));
 80014e0:	bf00      	nop
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f9      	beq.n	80014e2 <MCAL_UART_ReceiveData+0x16>
		 if(_UART_Config->USART_PARITY == USART_PARITY_NONE)
			 *((uint16_t*) pRXBuffer) = USARTx->DR;
		 else
			 *((uint16_t*) pRXBuffer) = (USARTx->DR & 0xFF);
	 }
	 else if (_UART_Config->USART_PAYLOAD_LENGTH == USART_PAYLOAD_LENGTH_8Bits)
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MCAL_UART_ReceiveData+0x60>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7a1b      	ldrb	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d114      	bne.n	8001522 <MCAL_UART_ReceiveData+0x56>
	 {
		 //No parity so all 9 bit are considered data
		 if(_UART_Config->USART_PARITY == USART_PARITY_NONE)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MCAL_UART_ReceiveData+0x60>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	7a5b      	ldrb	r3, [r3, #9]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d107      	bne.n	8001512 <MCAL_UART_ReceiveData+0x46>
			 *((uint16_t*) pRXBuffer) = (USARTx->DR & (uint8_t) 0xFF);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b29b      	uxth	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	801a      	strh	r2, [r3, #0]
		 else
			 *((uint16_t*) pRXBuffer) = (USARTx->DR & (uint8_t) 0x7F);
	 }
 }
 8001510:	e007      	b.n	8001522 <MCAL_UART_ReceiveData+0x56>
			 *((uint16_t*) pRXBuffer) = (USARTx->DR & (uint8_t) 0x7F);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151c:	b29a      	uxth	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	801a      	strh	r2, [r3, #0]
 }
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000064 	.word	0x20000064

08001530 <MCAL_UART_GPIO_Set_Pins>:
  *
  * Note			-NONE
  * =================================================================
  */
 void MCAL_UART_GPIO_Set_Pins(USART_TypeDef * USARTx )
 {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	 if (USARTx == USART1 )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <MCAL_UART_GPIO_Set_Pins+0x40>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d113      	bne.n	8001568 <MCAL_UART_GPIO_Set_Pins+0x38>
		 //PA10 RX
		 //PA11 CTS
		 //PA12 RTS

		 //PA9  TX
		 PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001544:	81bb      	strh	r3, [r7, #12]
		 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001546:	2306      	movs	r3, #6
 8001548:	73bb      	strb	r3, [r7, #14]
		 PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
		 MCAL_GPIO_Init(GPIOA, PinCfg);
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <MCAL_UART_GPIO_Set_Pins+0x44>)
 8001552:	f7fe ffd9 	bl	8000508 <MCAL_GPIO_Init>

		 //PA10 RX
		 PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155a:	81bb      	strh	r3, [r7, #12]
		 PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 800155c:	2307      	movs	r3, #7
 800155e:	73bb      	strb	r3, [r7, #14]
		 MCAL_GPIO_Init(GPIOA, PinCfg);
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <MCAL_UART_GPIO_Set_Pins+0x44>)
 8001564:	f7fe ffd0 	bl	8000508 <MCAL_GPIO_Init>

		 }

	 }
	 //Implement USART2 , USART3
 }
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013800 	.word	0x40013800
 8001574:	40010800 	.word	0x40010800

08001578 <USART1_IRQHandler>:
 //========================================================================
 //								ISR Functions
 //========================================================================

void USART1_IRQHandler (void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	_UART_Config->P_IRQ_CALLBACK() ;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <USART1_IRQHandler+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4798      	blx	r3
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000064 	.word	0x20000064

0800158c <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	 _UART_Config->P_IRQ_CALLBACK() ;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <USART2_IRQHandler+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4798      	blx	r3
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000064 	.word	0x20000064

080015a0 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	 _UART_Config->P_IRQ_CALLBACK() ;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <USART3_IRQHandler+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	4798      	blx	r3
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000064 	.word	0x20000064

080015b4 <__libc_init_array>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	2600      	movs	r6, #0
 80015b8:	4d0c      	ldr	r5, [pc, #48]	; (80015ec <__libc_init_array+0x38>)
 80015ba:	4c0d      	ldr	r4, [pc, #52]	; (80015f0 <__libc_init_array+0x3c>)
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	42a6      	cmp	r6, r4
 80015c2:	d109      	bne.n	80015d8 <__libc_init_array+0x24>
 80015c4:	f000 f81a 	bl	80015fc <_init>
 80015c8:	2600      	movs	r6, #0
 80015ca:	4d0a      	ldr	r5, [pc, #40]	; (80015f4 <__libc_init_array+0x40>)
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <__libc_init_array+0x44>)
 80015ce:	1b64      	subs	r4, r4, r5
 80015d0:	10a4      	asrs	r4, r4, #2
 80015d2:	42a6      	cmp	r6, r4
 80015d4:	d105      	bne.n	80015e2 <__libc_init_array+0x2e>
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015dc:	4798      	blx	r3
 80015de:	3601      	adds	r6, #1
 80015e0:	e7ee      	b.n	80015c0 <__libc_init_array+0xc>
 80015e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e6:	4798      	blx	r3
 80015e8:	3601      	adds	r6, #1
 80015ea:	e7f2      	b.n	80015d2 <__libc_init_array+0x1e>
 80015ec:	0800162c 	.word	0x0800162c
 80015f0:	0800162c 	.word	0x0800162c
 80015f4:	0800162c 	.word	0x0800162c
 80015f8:	08001630 	.word	0x08001630

080015fc <_init>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr

08001608 <_fini>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr
