************************************************************ C BASICS ************************************************************
1) ####### Printing on the screen #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	puts("!!!Hello World!!!"); /* prints !!!Hello World!!! */
	return EXIT_SUCCESS;
}

*************************************************************************************************************************************
2) ####### printing a number #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	char number [10] ;
	printf("Enter a number : ");
	fflush(stdout);
	gets(number);
	printf("the number is : ");
	printf("%s",number);
	return 0;
}

*************************************************************************************************************************************
3) ####### Adding two numbers #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int number1 ;
	int number2   ;
	printf("Enter two numbers : ");
	fflush(stdout);
	scanf("%d",&number1);Ø¦
	scanf("%d",&number2);
	printf("the sum is :  %d",number1+number2);
	return 0;
}

*************************************************************************************************************************************
4) ####### multiplying two floats #######


#include <stdio.h>
#include <stdlib.h>

int main(void) {
	float number1 ;
	float number2   ;
	printf("Enter two numbers : ");
	fflush(stdout);
	scanf("%f",&number1);
	scanf("%f",&number2);
	printf("the product is :  %.2f",number1*number2);
	return 0;
}

*************************************************************************************************************************************
5)####### finding the ASCII code of a character #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	char character ;
	printf("Enter Char : ");
	fflush(stdout);
	scanf("%c",&character);
	printf("the ASCII code for %c is :  %d",character , character);
	return 0;
}

*************************************************************************************************************************************
6) ####### swapping two numbers #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	float number1 ;
	float number2 ;
	float temp ;
	printf("Enter number 1 : ");
	fflush(stdout);
	scanf("%f",&number1);
	printf("Enter number 2 : ");
	fflush(stdout);
	scanf("%f",&number2);
	temp = number1;
	number1 = number2;
	number2 = temp;
	printf("number 1 is :  %.2f \n",number1);
	printf("number 2 is :  %.2f \n",number2);
	return 0;
}

*************************************************************************************************************************************
7) ####### swapping two numbers without temp #######


#include <stdio.h>
#include <stdlib.h>

int main(void) {
	float number1 ;
	float number2 ;
	printf("Enter number 1 : ");
	fflush(stdout);
	scanf("%f",&number1);
	printf("Enter number 2 : ");
	fflush(stdout);
	scanf("%f",&number2);
	number1 = number1 + number2;
	number2 = number1 - number2;
	number1 = number1 - number2;

	printf("number 1 is :  %.2f \n",number1);
	printf("number 2 is :  %.2f \n",number2);
	return 0;
}

*************************************************************************************************************************************
#####################################################################################################################################

*********************************************************** Array & String **********************************************************
1) ####### Adding two matricies #######


#include <stdio.h>
#include <stdlib.h>

#define sizeR 2
#define sizeC 2

void create_Mat(float **Mat, int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			printf("Enter element (%d,%d) : ",i,j);
			fflush(stdout);
			scanf("%f",&(Mat[i][j]));
		}
	}
}

void print_Mat(float **Mat ,int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			printf("%.2f ",Mat[i][j]);
		}
		printf("\n");
	}
}
void add_Mat(float **Mat ,float **Mat1 , float **Mat2 ,int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			Mat[i][j] = Mat1[i][j] + Mat2[i][j];
		}
	}
}
int main(void) {
	float ** Matrix1 = malloc(sizeR*sizeof(float *));
	for(int i=0; i< sizeR; i++) Matrix1[i] = malloc(sizeC*sizeof(float));

	float ** Matrix2 = malloc(sizeR*sizeof(float *));
	for(int i=0; i< sizeR; i++) Matrix2[i] = malloc(sizeC*sizeof(float));

	float ** addMatrix = malloc(sizeR*sizeof(float *));
	for(int i=0; i< sizeR; i++) addMatrix[i] = malloc(sizeC*sizeof(float));

	create_Mat(Matrix1,sizeR,sizeC);

	printf("********************************\n");

	create_Mat(Matrix2,sizeR,sizeC);

	printf("********************************\n");

	add_Mat(addMatrix,Matrix1,Matrix2,sizeR,sizeC);

	print_Mat(addMatrix,sizeR,sizeC);

	return 0;
}

*************************************************************************************************************************************
2) ####### averaging numbers of an array #######


#include <stdio.h>
#include <stdlib.h>

#define ArrSize 3


void create_Arr(float *arr, int size){
	for(int i = 0 ; i < size ; i++){
			printf("Enter element (%d) : ",i);
			fflush(stdout);
			scanf("%f",&(arr[i]));
	}
}


int main(void) {

	float * Array = malloc(ArrSize*sizeof(float ));
	create_Arr(Array,ArrSize);
	float sum = 0;

	for(int i = 0 ; i <ArrSize ; i++){
		sum = sum + Array[i];
	}

	printf("The average of the array := %.2f \n",(sum/ArrSize));
	return 0;
}


*************************************************************************************************************************************
3) ####### transposing a matrix #######

#include <stdio.h>
#include <stdlib.h>

#define sizeR 3
#define sizeC 2

void create_Mat(float **Mat, int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			printf("Enter element (%d,%d) : ",i,j);
			fflush(stdout);
			scanf("%f",&(Mat[i][j]));
		}
	}
}

void print_Mat(float **Mat ,int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			printf("%.2f ",Mat[i][j]);
		}
		printf("\n");
	}
}
void Transpose_Mat(float **Mat1 , float **Mat2 ,int rows , int coloumns){
	for(int i = 0 ; i < rows ; i++){
		for(int j = 0 ; j < coloumns ; j++){
			Mat1[i][j] = Mat2[j][i];
		}
	}
}
int main(void) {

	float ** Matrix1 = malloc(sizeR*sizeof(float *));
	for(int i=0; i< sizeR; i++) Matrix1[i] = malloc(sizeC*sizeof(float));

	float ** Matrix2 = malloc(sizeC*sizeof(float *));
	for(int i=0; i< sizeC; i++) Matrix2[i] = malloc(sizeR*sizeof(float));


	create_Mat(Matrix1,sizeR,sizeC);

	printf("The original matrix : \n");
	print_Mat(Matrix1,sizeR,sizeC);

	printf("********************************\n");

	Transpose_Mat(Matrix2,Matrix1,sizeC,sizeR);

	printf("********************************\n");

	printf("The transposed matrix : \n");
	print_Mat(Matrix2,sizeC,sizeR);

	return 0;
}

*************************************************************************************************************************************
4) ####### inserting a number in an array index #######

#include <stdio.h>
#include <stdlib.h>

int ArrSize =5;


void create_Arr(float *arr, int size){
	for(int i = 0 ; i < size ; i++){
			printf("Enter element (%d) : ",i);
			fflush(stdout);
			scanf("%f",&(arr[i]));
	}
}


void insert_Arr(float *arr, int number , int index){
	ArrSize ++;
	arr =  realloc(arr ,ArrSize*sizeof(float ));
	float temp1 = 0;
	float temp2 = 0;
	char startcounting = 0;
	int counter = 0;
	for(int i = 0 ; i < ArrSize ; i++){
		if(i == (index-1)){temp1 = arr[i]; arr[i] = number ;startcounting = 1;}
		if(startcounting){
			if(counter%2==0){
				temp2 = arr[i+1];
				arr[i+1]=temp1;
			}
			else{
				temp1 = arr[i+1];
				arr[i+1]= temp2;
			}
			counter++;
	    }
	}
}

void print_Arr(float *arr){
	printf("The Array is :[ ");
	for(int i = 0 ; i < ArrSize ; i++){
		if(i==ArrSize-1){
		printf("%f", arr[i]);
		}
		else{
		printf("%f ,",arr[i]);
		}
	}
	printf("]\n");
}

int main(void) {

	float * Array = malloc(ArrSize*sizeof(float ));
	create_Arr(Array,ArrSize);
	print_Arr(Array);
	insert_Arr(Array,33,1);
	printf("After insertion \n");
	print_Arr(Array);
	return 0;
}

*************************************************************************************************************************************
5) ####### searching for a number in an array #######

#include <stdio.h>
#include <stdlib.h>

int ArrSize =5;


void create_Arr(float *arr, int size){
	for(int i = 0 ; i < size ; i++){
			printf("Enter element (%d) : ",i);
			fflush(stdout);
			scanf("%f",&(arr[i]));
	}
}


int search_Arr(float *arr, int number ){
	for(int i = 0 ; i < ArrSize ; i++){
		if(arr[i] == number){return i;}
	}
	return -1;
}

void print_Arr(float *arr){
	printf("The Array is :[ ");
	for(int i = 0 ; i < ArrSize ; i++){
		if(i==ArrSize-1){
		printf("%.2f", arr[i]);
		}
		else{
		printf("%.2f ,",arr[i]);
		}
	}
	printf("]\n");
}

int main(void) {
	int index = 0;
	int number = 0;
	float * Array = malloc(ArrSize*sizeof(float ));
	create_Arr(Array,ArrSize);
	print_Arr(Array);
	printf("Enter the number to look for:");
	fflush(stdout);
	scanf("%d",&number);
	index = search_Arr(Array,number);
	if(index == -1 ){printf("number wasn't found \n");}
	else{
		printf("number was found at index %d \n",index);
	}
	return 0;
}

*************************************************************************************************************************************
6) ####### counting a character in a string #######

#include <stdio.h>
#include <stdlib.h>
#define StringMAXSIZE 100

int main(void) {
	printf("Enter the string:");
	fflush(stdout);
	char String[StringMAXSIZE];
	gets(String);
	printf("Enter the character to count:");
	fflush(stdout);
	char character = 0;
	int counter = 0;
	scanf("%c",&character);
	for (int i = 0 ; i <= StringMAXSIZE ; i++){
		if(String[i]== character){counter++;}
		if(String[i]== 0){break;}
	}
	printf("Enter the character '%c' was found %d times",character,counter);
	return 0;
}

*************************************************************************************************************************************
7) ####### printing the length of a string #######

#include <stdio.h>
#include <stdlib.h>
#define StringMAXSIZE 100

int main(void) {
	printf("Enter the string:");
	fflush(stdout);
	char String[StringMAXSIZE];
	gets(String);
	printf("the length of the strings is %d",strlen(String));
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
8) ####### reversing a string #######

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define StringMAXSIZE 100

int main(void) {
	printf("Enter the string:");
	fflush(stdout);
	char String[StringMAXSIZE];
	gets(String);
	int size = strlen(String);
	for(int i=0 ; i <size ; i ++ ){
		printf("%c",String[size-i-1]);
	}
	printf("\n");
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
#####################################################################################################################################

************************************************************* C FUNCTIONS ***********************************************************
1) ####### prime numbers in an interval #######

#include <stdio.h>
#include <stdlib.h>

void print_primes_range (int min , int max );

void print_primes_range (int min , int max ){
	unsigned char prime = 0;
	printf("The prime numbers between %d and %d are : \n",min,max);
	for(int i = min ; i<max ; i++){
		prime = 1;
		for(int j = 2 ; j< i; j++){
			if(i%j == 0) {prime = 0;  break;}
			}
		if(prime){ printf("%d \n",i);}
	}
};
int main(void) {
	int min;
	int max;
	printf("Enter the Minimum number:");
	fflush(stdout);
	scanf("%d",&min);
	printf("Enter the Maximum number:");
	fflush(stdout);
	scanf("%d",&max);
	print_primes_range ( min ,  max );
	printf("\n");
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
2) ####### factorial using recursion #######

#include <stdio.h>
#include <stdlib.h>

int factorial ( int num );

int factorial (int num  ){
	if(num == 1){return 1;}
	else{return( num* factorial(num-1));}
}
int main(void) {
	int num ;
	printf("Enter the number: ");
	fflush(stdout);
	scanf("%d",&num);
	printf("The factorial is : %d \n",factorial(num));
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
3) ####### reverse using recursion #######

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define StringMAXSIZE 100

void reverse_recur(char * s , int size);

void reverse_recur(char * s , int size){
	printf("%c",s[size-1]);
	if(size==1){}
	else{size--; reverse_recur(s ,  size);}
}

int main(void) {
	printf("Enter the string:");
	fflush(stdout);
	char String[StringMAXSIZE];
	gets(String);
	int size = strlen(String);
	reverse_recur(String , size);
	printf("\n");
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
4) ####### power using recursion #######

#include <stdio.h>
#include <stdlib.h>

int power ( int num , int pow );
int power (int num , int pow ){
	if(pow == 0){return 1;}
	else{pow--; return( num* power(num ,pow));}
}
int main(void) {
	int num ;
	int pow ;
	printf("Enter the number: ");
	fflush(stdout);
	scanf("%d",&num);
	printf("Enter the power: ");
	fflush(stdout);
	scanf("%d",&pow);
	printf("The power is : %d \n",power(num,pow));
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
#####################################################################################################################################

************************************************************* STRUCTURES ***********************************************************
1) ####### making student database #######

#include <stdio.h>
#include <stdlib.h>
#define StringMAXSIZE 100

struct student
{
	char name [StringMAXSIZE] ;
	int roll;
	int marks;
};
struct student s;
void display_data(struct student *ptr){
	printf("Student Name is: %s \n",ptr->name);
	printf("Student Roll is: %d \n",ptr->roll);
	printf("Student Mark is: %d \n",ptr->marks);
}


int main(void) {
	struct student *ptr = &s;
	printf("Enter the Name: ");
	fflush(stdout);
	gets(s.name);
	printf("Enter the Roll: ");
	fflush(stdout);
	scanf("%d",&(s.roll));
	printf("Enter the Marks: ");
	fflush(stdout);
	scanf("%d",&(s.marks));
	display_data(ptr);
	return 0;
}

*************************************************************************************************************************************
2) ####### summing distances in feet/inches system #######

#include <stdio.h>
#include <stdlib.h>

struct distance
{
	int feet;
	int inches;
};
struct distance d1;
struct distance d2;
void display_sum(struct distance *ptr , struct distance *ptr2){
	if(ptr->inches+ptr2->inches >= 12){printf("sum is %d feet and %d inches \n",ptr->feet+ptr2->feet+1,ptr->inches+ptr2->inches-12);}
	else{printf("sum is %d feet and %d inches \n",ptr->feet+ptr2->feet,ptr->inches+ptr2->inches);}
}


int main(void) {
	struct distance *ptr = &d1;
	struct distance *ptr2 = &d2;
	printf("Enter the first Distance (feet,inches): ");
	fflush(stdout);
	scanf("%d,%d",&(d1.feet),&(d1.inches));
	printf("Enter the second Distance (feet,inches): ");
	fflush(stdout);
	scanf("%d,%d",&(d2.feet),&(d2.inches));
	display_sum(ptr,ptr2);
	return 0;
}

*************************************************************************************************************************************
3) ####### summing complex numbers #######

#include <stdio.h>
#include <stdlib.h>

struct distance
{
	int real;
	int img;
};
struct distance d1;
struct distance d2;
void display_sum(struct distance *ptr , struct distance *ptr2){
	if(ptr->img+ptr2->img > 0){
	printf("sum is (%d+%dj) \n",ptr->real+ptr2->real,ptr->img+ptr2->img);
	}
	else{
	printf("sum is (%d%dj) \n",ptr->real+ptr2->real,ptr->img+ptr2->img);
	}
}


int main(void) {
	struct distance *ptr = &d1;
	struct distance *ptr2 = &d2;
	printf("Enter the first number (real,img): ");
	fflush(stdout);
	scanf("%d,%d",&(d1.real),&(d1.img));
	printf("Enter the second number (real,img): ");
	fflush(stdout);
	scanf("%d,%d",&(d2.real),&(d2.img));
	display_sum(ptr,ptr2);
	return 0;
}

*************************************************************************************************************************************
4) ####### storing database for multiple students #######

#include <stdio.h>
#include <stdlib.h>
#define StringMAXSIZE 100
#define studentNUM 5

struct student
{
	char name [StringMAXSIZE] ;
	int roll;
	int marks;
};

void display_data(struct student *ptr){
	printf("Student Name is: %s \n",ptr->name);
	printf("Student Roll is: %d \n",ptr->roll);
	printf("Student Mark is: %d \n",ptr->marks);
	printf("******************\n");
}


int main(void) {
	struct student s[studentNUM];
	for(int i = 0 ; i < studentNUM ; i++){
		printf("Enter the Name of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%s",(s[i].name));
		fflush(stdout);
		printf("Enter the Roll of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%d",&(s[i].roll));
		printf("Enter the Marks of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%d",&(s[i].marks));
		fflush(stdout);
		printf("******************\n");
	}
	for(int i = 0 ; i < studentNUM ; i++){
		struct student *ptr = &(s[i]);
		display_data(ptr);
	}
	return 0;
}

*************************************************************************************************************************************
5) ####### macro calculating the area #######


#include <stdio.h>
#include <stdlib.h>
#define Area(r) 3.14*r*r


int main(void) {
	int r = 3;
	printf("Area of a circle of radius %d = %.3f\n", r , Area(r));
	return 0;
}

*************************************************************************************************************************************
6) ####### output of the given code #######

size of union = 32 Bytes
size of struct = 40 Bytes

*************************************************************************************************************************************
#####################################################################################################################################

************************************************************* POINTERS ***********************************************************
1) ####### exploring pointer behavior #######

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int m = 29;
	int *ab = &m;
	printf("the address of the pointer ab is 0X%x and the value stored in it is %d\n", (unsigned int)ab , *ab);
	*ab = 34;
	printf("the address of the pointer ab is 0X%x and the value stored in it is %d\n", (unsigned int)ab , *ab);
	printf("the address of the variable m is 0X%x and the value stored in it is %d\n", (unsigned int)&m , m);
	return 0;
}

*************************************************************************************************************************************
2) ####### printing alphabet with pointers #######

#include <stdio.h>
#define ALPHABET_SIZE 26

int main() {
    char capitalAlphabets[ALPHABET_SIZE];

    char *ptr = capitalAlphabets;
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        *ptr = ch;
        ptr++;
    }
    ptr = capitalAlphabets; 
    printf("Capital Alphabets: ");
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c ", *ptr);
        ptr++; 
    }
    printf("\n");

    return 0;
}

*************************************************************************************************************************************
3) ####### reversing string with pointers #######

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define StringMAXSIZE 100

int main(void) {
	printf("Enter the string:");
	fflush(stdout);
	char String[StringMAXSIZE];
	gets(String);
	char * ptr = String;
	int size = strlen(String);
	for(int i=0 ; i <size ; i ++ ){
		printf("%c",*(ptr+size-i-1));
	}
	printf("\n");
	fflush(stdout);
	return 0;
}

*************************************************************************************************************************************
4) ####### saving elements in array then reverse print with pointers #######

#include <stdio.h>
#include <stdlib.h>

int main() {
    int s;
    fflush(stdout);
    printf("Enter the size of the array: ");
    fflush(stdout);
    scanf("%d", &s);
    int* numbers = (int*)malloc(s * sizeof(int));
    if (numbers == NULL) {
        printf("Memory allocation failed. Exiting the program.\n");
        return 1;}
    printf("Enter %d numbers:\n", s);
    fflush(stdout);
    for (int i = 0; i < s; i++) {
        scanf("%d", &numbers[i]); }
    printf("Numbers in reverse order: ");
    fflush(stdout);
    for (int i = s - 1; i >= 0; i--) {
        printf("%d ", *(numbers + i));}
    printf("\n");
    free(numbers);
    return 0;
}

*************************************************************************************************************************************
5) ####### exploring the behavior of pointer to an array of (pointer to structures) #######

#include <stdio.h>
#include <stdlib.h>
#define StringMAXSIZE 100
#define studentNUM 3

struct student
{
	char name [StringMAXSIZE] ;
	int roll;
	int marks;
};

void display_data(struct student *ptr){
	printf("Student Name is: %s \n",ptr->name);
	printf("Student Roll is: %d \n",ptr->roll);
	printf("Student Mark is: %d \n",ptr->marks);
	printf("******************\n");
}


int main(void) {
	struct student s[studentNUM];
	struct student *ptr[studentNUM];
	for(int i = 0 ; i < studentNUM ; i++){
		printf("Enter the Name of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%s",(s[i].name));
		fflush(stdout);
		printf("Enter the Roll of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%d",&(s[i].roll));
		printf("Enter the Marks of student number(%d): ",i+1);
		fflush(stdout);
		scanf("%d",&(s[i].marks));
		fflush(stdout);
		printf("******************\n");
		ptr[i]=&s[i];
	}
	for(int i = 0 ; i < studentNUM ; i++){
		display_data(*(ptr+i));
	}
	return 0;
}

*************************************************************************************************************************************
