//Learn in depth
//Copyrights Omar Shawky
#include "stdint.h"
typedef volatile unsigned int vuint32_t;
//Register addresses
#define GPIO_BASE		0x40010800
#define RCC_APB2ENR		*(volatile uint32_t *)(	RCC_BASE+	0x18)
#define GPIO_CRH		*(volatile uint32_t *)(	GPIO_BASE+	0x04)
#define GPIO_ODR		*(volatile uint32_t *)(	GPIO_BASE+	0x0C)

#define RCC_BASE		0x40021000
#define RCC_APB2ENR		*(volatile uint32_t *)(	RCC_BASE+	0x18)
#define RCC_CFGR		*(volatile uint32_t *)(	RCC_BASE+	0x04)

#define

//Bit fields
#define RCC_IOPAEN		(1<<2)
#define	GPIOA13			(1UL<<13)

unsigned char g_variables[3] = {1,2,3};
unsigned char const const_variables[3] = {1,2,3};

typedef union{
	vuint32_t	ALL_FIELDS;
	struct{
		vuint32_t	RESERVED:13;
		vuint32_t	P_13:1;
	} PIN;
} R_ODR_t;

volatile R_ODR_t* R_ODR = (volatile R_ODR_t*)(	GPIO_BASE+	0x0C);

void clock_init()
{
	//Set prescaler to APB2 (4)
	RCC_CFGR |= (0b101 < 11);
	//Set prescaler to APB1 (2)
	RCC_CFGR |= (0b100 < 8);

	RCC_APB2ENR |= RCC_IOPAEN;
}

void gpio_init()
{
	GPIO_CRH    &= 0xFF0FFFFF;
	GPIO_CRH    |= 0x00200000;
}

void main(void)
{
	clock_init();
	gpio_init();

}
