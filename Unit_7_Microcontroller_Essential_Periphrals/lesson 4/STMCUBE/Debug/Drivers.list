
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001330  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001488  08001488  00011490  2**0
                  CONTENTS
  4 .ARM          00000000  08001488  08001488  00011490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001488  08001490  00011490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08001490  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001490  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000114b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000103f  00000000  00000000  000114fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000569  00000000  00000000  0001253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000009c4  00000000  00000000  00012aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00013468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000158  00000000  00000000  00013608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000b35  00000000  00000000  00013760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000268c  00000000  00000000  00014295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009c51  00000000  00000000  00016921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000528  00000000  00000000  00020574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001448 	.word	0x08001448

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001448 	.word	0x08001448

08000170 <delay_ms>:
 *  Created on: Oct 3, 2023
 *      Author: omar pc
 */
#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg ;
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001b6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b8:	2304      	movs	r3, #4
 80001ba:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001bc:	2300      	movs	r3, #0
 80001be:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 80001c0:	6879      	ldr	r1, [r7, #4]
 80001c2:	483f      	ldr	r0, [pc, #252]	; (80002c0 <LCD_GPIO_init+0x114>)
 80001c4:	f000 fcaa 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001cc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ce:	2304      	movs	r3, #4
 80001d0:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	4839      	ldr	r0, [pc, #228]	; (80002c0 <LCD_GPIO_init+0x114>)
 80001da:	f000 fc9f 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e4:	2304      	movs	r3, #4
 80001e6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001e8:	2300      	movs	r3, #0
 80001ea:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 80001ec:	6879      	ldr	r1, [r7, #4]
 80001ee:	4834      	ldr	r0, [pc, #208]	; (80002c0 <LCD_GPIO_init+0x114>)
 80001f0:	f000 fc94 	bl	8000b1c <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80001f4:	2301      	movs	r3, #1
 80001f6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f8:	2304      	movs	r3, #4
 80001fa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001fc:	2300      	movs	r3, #0
 80001fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000200:	6879      	ldr	r1, [r7, #4]
 8000202:	482f      	ldr	r0, [pc, #188]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000204:	f000 fc8a 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000208:	2302      	movs	r3, #2
 800020a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020c:	2304      	movs	r3, #4
 800020e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000210:	2300      	movs	r3, #0
 8000212:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	482a      	ldr	r0, [pc, #168]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000218:	f000 fc80 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800021c:	2304      	movs	r3, #4
 800021e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	2304      	movs	r3, #4
 8000222:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000224:	2300      	movs	r3, #0
 8000226:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4825      	ldr	r0, [pc, #148]	; (80002c0 <LCD_GPIO_init+0x114>)
 800022c:	f000 fc76 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000230:	2308      	movs	r3, #8
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000238:	2300      	movs	r3, #0
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	4820      	ldr	r0, [pc, #128]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000240:	f000 fc6c 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000244:	2310      	movs	r3, #16
 8000246:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000248:	2304      	movs	r3, #4
 800024a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800024c:	2300      	movs	r3, #0
 800024e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	481b      	ldr	r0, [pc, #108]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000254:	f000 fc62 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000258:	2320      	movs	r3, #32
 800025a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800025c:	2304      	movs	r3, #4
 800025e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4816      	ldr	r0, [pc, #88]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000268:	f000 fc58 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000270:	2304      	movs	r3, #4
 8000272:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000274:	2300      	movs	r3, #0
 8000276:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	4811      	ldr	r0, [pc, #68]	; (80002c0 <LCD_GPIO_init+0x114>)
 800027c:	f000 fc4e 	bl	8000b1c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000284:	2304      	movs	r3, #4
 8000286:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CTRL, PinCfg);
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LCD_GPIO_init+0x114>)
 8000290:	f000 fc44 	bl	8000b1c <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_LOW);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029a:	4809      	ldr	r0, [pc, #36]	; (80002c0 <LCD_GPIO_init+0x114>)
 800029c:	f001 f866 	bl	800136c <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_LOW);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <LCD_GPIO_init+0x114>)
 80002a8:	f001 f860 	bl	800136c <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <LCD_GPIO_init+0x114>)
 80002b4:	f001 f85a 	bl	800136c <MCAL_GPIO_Write_PIN>

}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40010800 	.word	0x40010800

080002c4 <LCD_clear_screen>:

void LCD_clear_screen() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 f857 	bl	800037c <LCD_WRITE_COMMAND>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_HIGH);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	4807      	ldr	r0, [pc, #28]	; (80002fc <LCD_lcd_kick+0x28>)
 80002e0:	f001 f844 	bl	800136c <MCAL_GPIO_Write_PIN>
	delay_ms(50);
 80002e4:	2032      	movs	r0, #50	; 0x32
 80002e6:	f7ff ff43 	bl	8000170 <delay_ms>
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_LOW);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <LCD_lcd_kick+0x28>)
 80002f2:	f001 f83b 	bl	800136c <MCAL_GPIO_Write_PIN>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	460a      	mov	r2, r1
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d108      	bne.n	8000328 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	2b0f      	cmp	r3, #15
 800031a:	d805      	bhi.n	8000328 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	3b80      	subs	r3, #128	; 0x80
 8000320:	b2db      	uxtb	r3, r3
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f82a 	bl	800037c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d108      	bne.n	8000340 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	d805      	bhi.n	8000340 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	3b40      	subs	r3, #64	; 0x40
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f81e 	bl	800037c <LCD_WRITE_COMMAND>
		}
	}
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <LCD_INIT>:

void LCD_INIT() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

	delay_ms(20);
 800034c:	2014      	movs	r0, #20
 800034e:	f7ff ff0f 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000352:	f7ff ff2b 	bl	80001ac <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000356:	200f      	movs	r0, #15
 8000358:	f7ff ff0a 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 800035c:	f7ff ffb2 	bl	80002c4 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000360:	2038      	movs	r0, #56	; 0x38
 8000362:	f000 f80b 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000366:	2006      	movs	r0, #6
 8000368:	f000 f808 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800036c:	2080      	movs	r0, #128	; 0x80
 800036e:	f000 f805 	bl	800037c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000372:	200f      	movs	r0, #15
 8000374:	f000 f802 	bl	800037c <LCD_WRITE_COMMAND>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}

0800037c <LCD_WRITE_COMMAND>:
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_Write_PORT(LCD_CTRL, command);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	b29b      	uxth	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <LCD_WRITE_COMMAND+0x40>)
 800038e:	f001 f80f 	bl	80013b0 <MCAL_GPIO_Write_PORT>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <LCD_WRITE_COMMAND+0x40>)
 800039a:	f000 ffe7 	bl	800136c <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_LOW);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <LCD_WRITE_COMMAND+0x40>)
 80003a6:	f000 ffe1 	bl	800136c <MCAL_GPIO_Write_PIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f7ff fee0 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003b0:	f7ff ff90 	bl	80002d4 <LCD_lcd_kick>

}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40010800 	.word	0x40010800

080003c0 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_Write_PORT(LCD_CTRL, character);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LCD_WRITE_CHAR+0x40>)
 80003d2:	f000 ffed 	bl	80013b0 <MCAL_GPIO_Write_PORT>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <LCD_WRITE_CHAR+0x40>)
 80003de:	f000 ffc5 	bl	800136c <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_HIGH);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <LCD_WRITE_CHAR+0x40>)
 80003ea:	f000 ffbf 	bl	800136c <MCAL_GPIO_Write_PIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff febe 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003f4:	f7ff ff6e 	bl	80002d4 <LCD_lcd_kick>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40010800 	.word	0x40010800

08000404 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000410:	e01c      	b.n	800044c <LCD_WRITE_STRING+0x48>
		count++;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ffcd 	bl	80003c0 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b10      	cmp	r3, #16
 800042a:	d104      	bne.n	8000436 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	2002      	movs	r0, #2
 8000430:	f7ff ff66 	bl	8000300 <LCD_GOTO_XY>
 8000434:	e00a      	b.n	800044c <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b20      	cmp	r3, #32
 800043a:	d107      	bne.n	800044c <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 800043c:	f7ff ff42 	bl	80002c4 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ff5c 	bl	8000300 <LCD_GOTO_XY>
			count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1de      	bne.n	8000412 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <wait_ms>:

 uint32_t IRQ_Flag = 0 ;
 void ISR_CALLBACK(void);

 void wait_ms(uint32_t time)
 {
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e00b      	b.n	8000484 <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	e002      	b.n	8000478 <wait_ms+0x1a>
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	3301      	adds	r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	2bfe      	cmp	r3, #254	; 0xfe
 800047c:	d9f9      	bls.n	8000472 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3301      	adds	r3, #1
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	d3ef      	bcc.n	800046c <wait_ms+0xe>
			;
 }
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <main>:
 int main(void)
 {
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
	//Enable Clock();
	RCC_GPIOA_CLK_EN();
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <main+0x68>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a17      	ldr	r2, [pc, #92]	; (8000500 <main+0x68>)
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <main+0x68>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <main+0x68>)
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <main+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <main+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 80004c2:	f7ff ff41 	bl	8000348 <LCD_INIT>
	LCD_clear_screen();
 80004c6:	f7ff fefd 	bl	80002c4 <LCD_clear_screen>

	EXTI_Config_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <main+0x6c>)
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RisingEdge ;
 80004d6:	2300      	movs	r3, #0
 80004d8:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CALLBACK = ISR_CALLBACK ;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <main+0x70>)
 80004dc:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_ENABLE ;
 80004de:	2301      	movs	r3, #1
 80004e0:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f84d 	bl	8000586 <MCAL_EXTI_GPIO_Init>

	/*Loop Forever*/
	while (1)
		{
			if(IRQ_Flag)
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x74>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0fb      	beq.n	80004ec <main+0x54>
			{
				LCD_clear_screen();
 80004f4:	f7ff fee6 	bl	80002c4 <LCD_clear_screen>
				IRQ_Flag = 0 ;
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <main+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
			if(IRQ_Flag)
 80004fe:	e7f5      	b.n	80004ec <main+0x54>
 8000500:	40021000 	.word	0x40021000
 8000504:	08001460 	.word	0x08001460
 8000508:	08000511 	.word	0x08000511
 800050c:	2000001c 	.word	0x2000001c

08000510 <ISR_CALLBACK>:
			}
		}

 }
 void ISR_CALLBACK(void)
 {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	 IRQ_Flag = 1 ;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <ISR_CALLBACK+0x1c>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
	 LCD_WRITE_STRING("IRQ EXTI9 has happened _|-");
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <ISR_CALLBACK+0x20>)
 800051c:	f7ff ff72 	bl	8000404 <LCD_WRITE_STRING>
	 wait_ms(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f7ff ff9b 	bl	800045e <wait_ms>
 }
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000001c 	.word	0x2000001c
 8000530:	0800146c 	.word	0x0800146c

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f000 ff4d 	bl	8001400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff ff97 	bl	8000498 <main>

0800056a <LoopForever>:

LoopForever:
  b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000578:	08001490 	.word	0x08001490
  ldr r2, =_sbss
 800057c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000580:	2000005c 	.word	0x2000005c

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>

08000586 <MCAL_EXTI_GPIO_Init>:
  * 				but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
  * 				-Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
  * =================================================================
  */
 void MCAL_EXTI_GPIO_Init(EXTI_Config_t* EXTI_Config)
 {
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	_Update_EXTI(EXTI_Config);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f804 	bl	800059c <_Update_EXTI>
 }
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_Update_EXTI>:
 *
 * Note-		- NONE
 * =================================================================
 */
 void _Update_EXTI(EXTI_Config_t* EXTI_Config)
 {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	//1 - Configure GPIO to be AF Input -> Floating Input
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, PinConfig);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fab1 	bl	8000b1c <MCAL_GPIO_Init>
	//==============================================================
	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) ;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	73bb      	strb	r3, [r7, #14]

	//clear the 4 bits
	ClearHalfByte( AFIO->EXTICR[AFIO_EXTICR_index] , AFIO_EXTICR_Position );
 80005d0:	4a60      	ldr	r2, [pc, #384]	; (8000754 <_Update_EXTI+0x1b8>)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3302      	adds	r3, #2
 80005d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	210f      	movs	r1, #15
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	495a      	ldr	r1, [pc, #360]	; (8000754 <_Update_EXTI+0x1b8>)
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4002      	ands	r2, r0
 80005ee:	3302      	adds	r3, #2
 80005f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Set the Bits corresponding to chosen GPIO port
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)&0xF)\
 80005f4:	4a57      	ldr	r2, [pc, #348]	; (8000754 <_Update_EXTI+0x1b8>)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	3302      	adds	r3, #2
 80005fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4955      	ldr	r1, [pc, #340]	; (8000758 <_Update_EXTI+0x1bc>)
 8000604:	428b      	cmp	r3, r1
 8000606:	d016      	beq.n	8000636 <_Update_EXTI+0x9a>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4953      	ldr	r1, [pc, #332]	; (800075c <_Update_EXTI+0x1c0>)
 800060e:	428b      	cmp	r3, r1
 8000610:	d00f      	beq.n	8000632 <_Update_EXTI+0x96>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4952      	ldr	r1, [pc, #328]	; (8000760 <_Update_EXTI+0x1c4>)
 8000618:	428b      	cmp	r3, r1
 800061a:	d008      	beq.n	800062e <_Update_EXTI+0x92>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4950      	ldr	r1, [pc, #320]	; (8000764 <_Update_EXTI+0x1c8>)
 8000622:	428b      	cmp	r3, r1
 8000624:	d101      	bne.n	800062a <_Update_EXTI+0x8e>
 8000626:	2303      	movs	r3, #3
 8000628:	e006      	b.n	8000638 <_Update_EXTI+0x9c>
 800062a:	2300      	movs	r3, #0
 800062c:	e004      	b.n	8000638 <_Update_EXTI+0x9c>
 800062e:	2302      	movs	r3, #2
 8000630:	e002      	b.n	8000638 <_Update_EXTI+0x9c>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <_Update_EXTI+0x9c>
 8000636:	2300      	movs	r3, #0
										                        <<AFIO_EXTICR_Position*4);
 8000638:	7bb9      	ldrb	r1, [r7, #14]
 800063a:	0089      	lsls	r1, r1, #2
 800063c:	408b      	lsls	r3, r1
 800063e:	4618      	mov	r0, r3
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)&0xF)\
 8000640:	4944      	ldr	r1, [pc, #272]	; (8000754 <_Update_EXTI+0x1b8>)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	4302      	orrs	r2, r0
 8000646:	3302      	adds	r3, #2
 8000648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==============================================================
	//3- Update the Rising/Falling Edge
	//Clear the rising and falling bits
	ClearBit(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <_Update_EXTI+0x1cc>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a42      	ldr	r2, [pc, #264]	; (8000768 <_Update_EXTI+0x1cc>)
 8000660:	400b      	ands	r3, r1
 8000662:	6093      	str	r3, [r2, #8]
	ClearBit(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000664:	4b40      	ldr	r3, [pc, #256]	; (8000768 <_Update_EXTI+0x1cc>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	43d2      	mvns	r2, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4a3c      	ldr	r2, [pc, #240]	; (8000768 <_Update_EXTI+0x1cc>)
 8000678:	400b      	ands	r3, r1
 800067a:	60d3      	str	r3, [r2, #12]

	switch(EXTI_Config->Trigger_Case)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7b1b      	ldrb	r3, [r3, #12]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d01d      	beq.n	80006c0 <_Update_EXTI+0x124>
 8000684:	2b02      	cmp	r3, #2
 8000686:	dc32      	bgt.n	80006ee <_Update_EXTI+0x152>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00d      	beq.n	80006a8 <_Update_EXTI+0x10c>
 800068c:	2b01      	cmp	r3, #1
 800068e:	d12e      	bne.n	80006ee <_Update_EXTI+0x152>
	{
		case EXTI_Trigger_FallingEdge:
			SetBit(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <_Update_EXTI+0x1cc>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	8812      	ldrh	r2, [r2, #0]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	4a31      	ldr	r2, [pc, #196]	; (8000768 <_Update_EXTI+0x1cc>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	60d3      	str	r3, [r2, #12]
			break;
 80006a6:	e023      	b.n	80006f0 <_Update_EXTI+0x154>
		case EXTI_Trigger_RisingEdge:
			SetBit(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006a8:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <_Update_EXTI+0x1cc>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	8812      	ldrh	r2, [r2, #0]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a2b      	ldr	r2, [pc, #172]	; (8000768 <_Update_EXTI+0x1cc>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
			break;
 80006be:	e017      	b.n	80006f0 <_Update_EXTI+0x154>
		case EXTI_Trigger_RisingAndFallingEdge:
			SetBit(EXTI->RTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <_Update_EXTI+0x1cc>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	408a      	lsls	r2, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a25      	ldr	r2, [pc, #148]	; (8000768 <_Update_EXTI+0x1cc>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6093      	str	r3, [r2, #8]
			SetBit(EXTI->FTSR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <_Update_EXTI+0x1cc>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	8812      	ldrh	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	2201      	movs	r2, #1
 80006e2:	408a      	lsls	r2, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <_Update_EXTI+0x1cc>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	60d3      	str	r3, [r2, #12]
			break;
 80006ec:	e000      	b.n	80006f0 <_Update_EXTI+0x154>
		default:
			break;
 80006ee:	bf00      	nop
	}
	//==============================================================
	//4- Update the function CALLBACK to the ISR
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CALLBACK;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <_Update_EXTI+0x1d0>)
 80006fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==============================================================
	//5- Enable/Disable the IRQ EXTI & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_ENABLE)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b5b      	ldrb	r3, [r3, #13]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d110      	bne.n	800072a <_Update_EXTI+0x18e>
	{
		SetBit(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <_Update_EXTI+0x1cc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	8812      	ldrh	r2, [r2, #0]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <_Update_EXTI+0x1cc>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6013      	str	r3, [r2, #0]
		_Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f824 	bl	8000770 <_Enable_NVIC>
		ClearBit(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		_Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}


 }
 8000728:	e010      	b.n	800074c <_Update_EXTI+0x1b0>
		ClearBit(EXTI->IMR,EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <_Update_EXTI+0x1cc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	8812      	ldrh	r2, [r2, #0]
 8000732:	4611      	mov	r1, r2
 8000734:	2201      	movs	r2, #1
 8000736:	408a      	lsls	r2, r1
 8000738:	43d2      	mvns	r2, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <_Update_EXTI+0x1cc>)
 800073e:	400b      	ands	r3, r1
 8000740:	6013      	str	r3, [r2, #0]
		_Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f878 	bl	800083c <_Disable_NVIC>
 }
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40010000 	.word	0x40010000
 8000758:	40010800 	.word	0x40010800
 800075c:	40010c00 	.word	0x40010c00
 8000760:	40011000 	.word	0x40011000
 8000764:	40011400 	.word	0x40011400
 8000768:	40010400 	.word	0x40010400
 800076c:	20000020 	.word	0x20000020

08000770 <_Enable_NVIC>:
  *
  * Note-		- NONE
  * =================================================================
  */
 void _Enable_NVIC	(uint16_t IRQ)
 {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ)
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	2b0e      	cmp	r3, #14
 800077e:	d852      	bhi.n	8000826 <_Enable_NVIC+0xb6>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <_Enable_NVIC+0x18>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	080007c5 	.word	0x080007c5
 800078c:	080007d3 	.word	0x080007d3
 8000790:	080007e1 	.word	0x080007e1
 8000794:	080007ef 	.word	0x080007ef
 8000798:	080007fd 	.word	0x080007fd
 800079c:	0800080b 	.word	0x0800080b
 80007a0:	0800080b 	.word	0x0800080b
 80007a4:	0800080b 	.word	0x0800080b
 80007a8:	0800080b 	.word	0x0800080b
 80007ac:	0800080b 	.word	0x0800080b
 80007b0:	08000819 	.word	0x08000819
 80007b4:	08000819 	.word	0x08000819
 80007b8:	08000819 	.word	0x08000819
 80007bc:	08000819 	.word	0x08000819
 80007c0:	08000819 	.word	0x08000819
	 {
	 	 case 0 :
	 		 NVIC_IRQ6_EXTI0_EN();
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <_Enable_NVIC+0xc4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1a      	ldr	r2, [pc, #104]	; (8000834 <_Enable_NVIC+0xc4>)
 80007ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ce:	6013      	str	r3, [r2, #0]
	 		 break;
 80007d0:	e02a      	b.n	8000828 <_Enable_NVIC+0xb8>

	 	 case 1 :
	 		 NVIC_IRQ7_EXTI1_EN();
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <_Enable_NVIC+0xc4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <_Enable_NVIC+0xc4>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6013      	str	r3, [r2, #0]
	 		 break;
 80007de:	e023      	b.n	8000828 <_Enable_NVIC+0xb8>

	 	 case 2 :
	 		 NVIC_IRQ8_EXTI2_EN();
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <_Enable_NVIC+0xc4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <_Enable_NVIC+0xc4>)
 80007e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ea:	6013      	str	r3, [r2, #0]
	 		 break;
 80007ec:	e01c      	b.n	8000828 <_Enable_NVIC+0xb8>

	 	 case 3 :
	 		 NVIC_IRQ9_EXTI3_EN();
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_Enable_NVIC+0xc4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <_Enable_NVIC+0xc4>)
 80007f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f8:	6013      	str	r3, [r2, #0]
	 		 break;
 80007fa:	e015      	b.n	8000828 <_Enable_NVIC+0xb8>

	 	 case 4 :
	 		 NVIC_IRQ10_EXTI4_EN();
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <_Enable_NVIC+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <_Enable_NVIC+0xc4>)
 8000802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000806:	6013      	str	r3, [r2, #0]
	 		 break;
 8000808:	e00e      	b.n	8000828 <_Enable_NVIC+0xb8>
	 	 case 5 :
	 	 case 6 :
	 	 case 7 :
	 	 case 8 :
	 	 case 9 :
	 		 NVIC_IRQ23_EXTI5_9_EN();
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <_Enable_NVIC+0xc4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_Enable_NVIC+0xc4>)
 8000810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000814:	6013      	str	r3, [r2, #0]
	 		 break;
 8000816:	e007      	b.n	8000828 <_Enable_NVIC+0xb8>
	 	 case 10 :
	 	 case 11 :
	 	 case 12 :
	 	 case 13 :
	 	 case 14 :
	 		 NVIC_IRQ40_EXTI10_15_EN();
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_Enable_NVIC+0xc8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <_Enable_NVIC+0xc8>)
 800081e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000822:	6013      	str	r3, [r2, #0]
	 		 break;
 8000824:	e000      	b.n	8000828 <_Enable_NVIC+0xb8>

	 	 default:
	 		 break;
 8000826:	bf00      	nop

	 }
 }
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000e104 	.word	0xe000e104

0800083c <_Disable_NVIC>:
  *
  * Note-		- NONE
  * =================================================================
  */
 void _Disable_NVIC	(uint16_t IRQ)
 {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
	 switch(IRQ)
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	2b0e      	cmp	r3, #14
 800084a:	d852      	bhi.n	80008f2 <_Disable_NVIC+0xb6>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <_Disable_NVIC+0x18>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000891 	.word	0x08000891
 8000858:	0800089f 	.word	0x0800089f
 800085c:	080008ad 	.word	0x080008ad
 8000860:	080008bb 	.word	0x080008bb
 8000864:	080008c9 	.word	0x080008c9
 8000868:	080008d7 	.word	0x080008d7
 800086c:	080008d7 	.word	0x080008d7
 8000870:	080008d7 	.word	0x080008d7
 8000874:	080008d7 	.word	0x080008d7
 8000878:	080008d7 	.word	0x080008d7
 800087c:	080008e5 	.word	0x080008e5
 8000880:	080008e5 	.word	0x080008e5
 8000884:	080008e5 	.word	0x080008e5
 8000888:	080008e5 	.word	0x080008e5
 800088c:	080008e5 	.word	0x080008e5
	 {
	 	 case 0 :
	 		 NVIC_IRQ6_EXTI0_DIS();
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <_Disable_NVIC+0xc4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <_Disable_NVIC+0xc4>)
 8000896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089a:	6013      	str	r3, [r2, #0]
	 		 break;
 800089c:	e02a      	b.n	80008f4 <_Disable_NVIC+0xb8>

	 	 case 1 :
	 		 NVIC_IRQ7_EXTI1_DIS();
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <_Disable_NVIC+0xc4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <_Disable_NVIC+0xc4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6013      	str	r3, [r2, #0]
	 		 break;
 80008aa:	e023      	b.n	80008f4 <_Disable_NVIC+0xb8>

	 	 case 2 :
	 		 NVIC_IRQ8_EXTI2_DIS();
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <_Disable_NVIC+0xc4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <_Disable_NVIC+0xc4>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6013      	str	r3, [r2, #0]
	 		 break;
 80008b8:	e01c      	b.n	80008f4 <_Disable_NVIC+0xb8>

	 	 case 3 :
	 		 NVIC_IRQ9_EXTI3_DIS();
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_Disable_NVIC+0xc4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <_Disable_NVIC+0xc4>)
 80008c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c4:	6013      	str	r3, [r2, #0]
	 		 break;
 80008c6:	e015      	b.n	80008f4 <_Disable_NVIC+0xb8>

	 	 case 4 :
	 		 NVIC_IRQ10_EXTI4_DIS();
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <_Disable_NVIC+0xc4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <_Disable_NVIC+0xc4>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
	 		 break;
 80008d4:	e00e      	b.n	80008f4 <_Disable_NVIC+0xb8>
	 	 case 5 :
	 	 case 6 :
	 	 case 7 :
	 	 case 8 :
	 	 case 9 :
	 		 NVIC_IRQ23_EXTI5_9_DIS();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <_Disable_NVIC+0xc4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <_Disable_NVIC+0xc4>)
 80008dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008e0:	6013      	str	r3, [r2, #0]
	 		 break;
 80008e2:	e007      	b.n	80008f4 <_Disable_NVIC+0xb8>
	 	 case 10 :
	 	 case 11 :
	 	 case 12 :
	 	 case 13 :
	 	 case 14 :
	 		 NVIC_IRQ40_EXTI10_15_DIS();
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_Disable_NVIC+0xc8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <_Disable_NVIC+0xc8>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
	 		 break;
 80008f0:	e000      	b.n	80008f4 <_Disable_NVIC+0xb8>

	 	 default:
	 		 break;
 80008f2:	bf00      	nop

	 }
 }
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e180 	.word	0xe000e180
 8000904:	e000e184 	.word	0xe000e184

08000908 <EXTI0_IRQHandler>:

 //========================================================================
 //								ISR Functions
 //========================================================================
 void EXTI0_IRQHandler (void)
 {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,0);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[0]();
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <EXTI0_IRQHandler+0x20>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4798      	blx	r3

 }
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010400 	.word	0x40010400
 8000928:	20000020 	.word	0x20000020

0800092c <EXTI1_IRQHandler>:

 void EXTI1_IRQHandler (void)
 {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,1);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[1]();
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <EXTI1_IRQHandler+0x20>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4798      	blx	r3

 }
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400
 800094c:	20000020 	.word	0x20000020

08000950 <EXTI2_IRQHandler>:

 void EXTI2_IRQHandler (void)
 {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,2);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <EXTI2_IRQHandler+0x1c>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <EXTI2_IRQHandler+0x1c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[2]();
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI2_IRQHandler+0x20>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4798      	blx	r3

 }
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010400 	.word	0x40010400
 8000970:	20000020 	.word	0x20000020

08000974 <EXTI3_IRQHandler>:

 void EXTI3_IRQHandler (void)
 {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,3);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[3]();
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <EXTI3_IRQHandler+0x20>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4798      	blx	r3

 }
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010400 	.word	0x40010400
 8000994:	20000020 	.word	0x20000020

08000998 <EXTI4_IRQHandler>:

 void EXTI4_IRQHandler (void)
 {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 SetBit(EXTI->PR,4);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6153      	str	r3, [r2, #20]
	 GP_IRQ_CALLBACK[4]();
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI4_IRQHandler+0x20>)
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	4798      	blx	r3

 }
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000020 	.word	0x20000020

080009bc <EXTI9_5_IRQHandler>:


 void EXTI9_5_IRQHandler (void)
 {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 if( ReadBit(EXTI->PR,5) )	 	{ SetBit(EXTI->PR,5); GP_IRQ_CALLBACK[5]();}
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <EXTI9_5_IRQHandler+0x24>
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <EXTI9_5_IRQHandler+0xac>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4798      	blx	r3
	 else if( ReadBit(EXTI->PR,6) ) { SetBit(EXTI->PR,6); GP_IRQ_CALLBACK[6]();}
	 else if( ReadBit(EXTI->PR,7) ) { SetBit(EXTI->PR,7); GP_IRQ_CALLBACK[7]();}
	 else if( ReadBit(EXTI->PR,8) ) { SetBit(EXTI->PR,8); GP_IRQ_CALLBACK[8]();}
	 else if( ReadBit(EXTI->PR,9) ) { SetBit(EXTI->PR,9); GP_IRQ_CALLBACK[9]();}

 }
 80009de:	e03e      	b.n	8000a5e <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,6) ) { SetBit(EXTI->PR,6); GP_IRQ_CALLBACK[6]();}
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d009      	beq.n	8000a00 <EXTI9_5_IRQHandler+0x44>
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 80009f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f6:	6153      	str	r3, [r2, #20]
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <EXTI9_5_IRQHandler+0xac>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4798      	blx	r3
 }
 80009fe:	e02e      	b.n	8000a5e <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,7) ) { SetBit(EXTI->PR,7); GP_IRQ_CALLBACK[7]();}
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <EXTI9_5_IRQHandler+0x64>
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a16:	6153      	str	r3, [r2, #20]
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <EXTI9_5_IRQHandler+0xac>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	4798      	blx	r3
 }
 8000a1e:	e01e      	b.n	8000a5e <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,8) ) { SetBit(EXTI->PR,8); GP_IRQ_CALLBACK[8]();}
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <EXTI9_5_IRQHandler+0x84>
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6153      	str	r3, [r2, #20]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <EXTI9_5_IRQHandler+0xac>)
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	4798      	blx	r3
 }
 8000a3e:	e00e      	b.n	8000a5e <EXTI9_5_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,9) ) { SetBit(EXTI->PR,9); GP_IRQ_CALLBACK[9]();}
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d008      	beq.n	8000a5e <EXTI9_5_IRQHandler+0xa2>
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <EXTI9_5_IRQHandler+0xa8>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a56:	6153      	str	r3, [r2, #20]
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <EXTI9_5_IRQHandler+0xac>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	4798      	blx	r3
 }
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010400 	.word	0x40010400
 8000a68:	20000020 	.word	0x20000020

08000a6c <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler (void)
 {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	 //Clear Interrupt flag by writing 1
	 if( ReadBit(EXTI->PR,10) )	 	{ SetBit(EXTI->PR,10); GP_IRQ_CALLBACK[10]();}
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <EXTI15_10_IRQHandler+0x24>
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6153      	str	r3, [r2, #20]
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <EXTI15_10_IRQHandler+0xac>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	4798      	blx	r3
	 else if( ReadBit(EXTI->PR,11) ) { SetBit(EXTI->PR,11); GP_IRQ_CALLBACK[11]();}
	 else if( ReadBit(EXTI->PR,12) ) { SetBit(EXTI->PR,12); GP_IRQ_CALLBACK[12]();}
	 else if( ReadBit(EXTI->PR,13) ) { SetBit(EXTI->PR,13); GP_IRQ_CALLBACK[13]();}
	 else if( ReadBit(EXTI->PR,14) ) { SetBit(EXTI->PR,14); GP_IRQ_CALLBACK[14]();}

 }
 8000a8e:	e03e      	b.n	8000b0e <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,11) ) { SetBit(EXTI->PR,11); GP_IRQ_CALLBACK[11]();}
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <EXTI15_10_IRQHandler+0x44>
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa6:	6153      	str	r3, [r2, #20]
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <EXTI15_10_IRQHandler+0xac>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	4798      	blx	r3
 }
 8000aae:	e02e      	b.n	8000b0e <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,12) ) { SetBit(EXTI->PR,12); GP_IRQ_CALLBACK[12]();}
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <EXTI15_10_IRQHandler+0x64>
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac6:	6153      	str	r3, [r2, #20]
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <EXTI15_10_IRQHandler+0xac>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4798      	blx	r3
 }
 8000ace:	e01e      	b.n	8000b0e <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,13) ) { SetBit(EXTI->PR,13); GP_IRQ_CALLBACK[13]();}
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <EXTI15_10_IRQHandler+0x84>
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae6:	6153      	str	r3, [r2, #20]
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <EXTI15_10_IRQHandler+0xac>)
 8000aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aec:	4798      	blx	r3
 }
 8000aee:	e00e      	b.n	8000b0e <EXTI15_10_IRQHandler+0xa2>
	 else if( ReadBit(EXTI->PR,14) ) { SetBit(EXTI->PR,14); GP_IRQ_CALLBACK[14]();}
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d008      	beq.n	8000b0e <EXTI15_10_IRQHandler+0xa2>
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <EXTI15_10_IRQHandler+0xa8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6153      	str	r3, [r2, #20]
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <EXTI15_10_IRQHandler+0xac>)
 8000b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0c:	4798      	blx	r3
 }
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010400 	.word	0x40010400
 8000b18:	20000020 	.word	0x20000020

08000b1c <MCAL_GPIO_Init>:
  * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
  * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * =================================================================
 */
 void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t PinConfig)
 {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
 	//Enable the RCC on the GPIO port

 	//Initialize the pin mode
 	uint8_t PINNUM = _FindPinNum(PinConfig.GPIO_PinNumber);
 8000b26:	883b      	ldrh	r3, [r7, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fc4f 	bl	80013cc <_FindPinNum>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
 	//Port Configuration register low GPIOx_CRL -> Configure pin 0 to pin 7
 	if(PinConfig.GPIO_PinNumber< GPIO_PIN_8)
 8000b32:	883b      	ldrh	r3, [r7, #0]
 8000b34:	2bff      	cmp	r3, #255	; 0xff
 8000b36:	f200 8208 	bhi.w	8000f4a <MCAL_GPIO_Init+0x42e>
 	{
 		switch(PinConfig.GPIO_MODE)
 8000b3a:	78bb      	ldrb	r3, [r7, #2]
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	f200 8410 	bhi.w	8001362 <MCAL_GPIO_Init+0x846>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <MCAL_GPIO_Init+0x2c>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b6d 	.word	0x08000b6d
 8000b4c:	08000b9b 	.word	0x08000b9b
 8000b50:	08000bdd 	.word	0x08000bdd
 8000b54:	08000c2b 	.word	0x08000c2b
 8000b58:	08000c7b 	.word	0x08000c7b
 8000b5c:	08000d15 	.word	0x08000d15
 8000b60:	08000dc3 	.word	0x08000dc3
 8000b64:	08000e71 	.word	0x08000e71
 8000b68:	08000f09 	.word	0x08000f09
 		{
 			case GPIO_MODE_ANALOG:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	2103      	movs	r1, #3
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 				break;
 8000b98:	e3e3      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_FLO:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	2108      	movs	r1, #8
 8000bba:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbe:	43d2      	mvns	r2, r2
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	2104      	movs	r1, #4
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
 				break;
 8000bda:	e3c2      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PU:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	2103      	movs	r1, #3
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	43d2      	mvns	r2, r2
 8000bec:	401a      	ands	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	2108      	movs	r1, #8
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]
 				(GPIOx->ODR) |=  PinConfig.GPIO_PinNumber;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	883a      	ldrh	r2, [r7, #0]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60da      	str	r2, [r3, #12]
 				break;
 8000c28:	e39b      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PD:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	2103      	movs	r1, #3
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	2104      	movs	r1, #4
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	43d2      	mvns	r2, r2
 8000c50:	401a      	ands	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	2108      	movs	r1, #8
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
 				(GPIOx->ODR) &= ~PinConfig.GPIO_PinNumber;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	883a      	ldrh	r2, [r7, #0]
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
 				break;
 8000c78:	e373      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d032      	beq.n	8000ce6 <MCAL_GPIO_Init+0x1ca>
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	dc3b      	bgt.n	8000cfc <MCAL_GPIO_Init+0x1e0>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <MCAL_GPIO_Init+0x172>
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d016      	beq.n	8000cba <MCAL_GPIO_Init+0x19e>
 8000c8c:	e036      	b.n	8000cfc <MCAL_GPIO_Init+0x1e0>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	2102      	movs	r1, #2
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
 						break;
 8000cb8:	e020      	b.n	8000cfc <MCAL_GPIO_Init+0x1e0>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	43d2      	mvns	r2, r2
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	2102      	movs	r1, #2
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
 						break;
 8000ce4:	e00a      	b.n	8000cfc <MCAL_GPIO_Init+0x1e0>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	2103      	movs	r1, #3
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
 						break;
 8000cfa:	bf00      	nop
 				}
 				(GPIOx->CRL) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	210c      	movs	r1, #12
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
 				break;
 8000d12:	e326      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d032      	beq.n	8000d80 <MCAL_GPIO_Init+0x264>
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	dc3b      	bgt.n	8000d96 <MCAL_GPIO_Init+0x27a>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <MCAL_GPIO_Init+0x20c>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d016      	beq.n	8000d54 <MCAL_GPIO_Init+0x238>
 8000d26:	e036      	b.n	8000d96 <MCAL_GPIO_Init+0x27a>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	2102      	movs	r1, #2
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	401a      	ands	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
 						break;
 8000d52:	e020      	b.n	8000d96 <MCAL_GPIO_Init+0x27a>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	43d2      	mvns	r2, r2
 8000d64:	401a      	ands	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]
 						(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	2102      	movs	r1, #2
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 						break;
 8000d7e:	e00a      	b.n	8000d96 <MCAL_GPIO_Init+0x27a>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	2103      	movs	r1, #3
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	601a      	str	r2, [r3, #0]
 						break;
 8000d94:	bf00      	nop
 				}
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	2108      	movs	r1, #8
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	2104      	movs	r1, #4
 8000db6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
 				break;
 8000dc0:	e2cf      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d032      	beq.n	8000e2e <MCAL_GPIO_Init+0x312>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	dc3b      	bgt.n	8000e44 <MCAL_GPIO_Init+0x328>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <MCAL_GPIO_Init+0x2ba>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d016      	beq.n	8000e02 <MCAL_GPIO_Init+0x2e6>
 8000dd4:	e036      	b.n	8000e44 <MCAL_GPIO_Init+0x328>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	2102      	movs	r1, #2
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	601a      	str	r2, [r3, #0]
 							break;
 8000e00:	e020      	b.n	8000e44 <MCAL_GPIO_Init+0x328>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	43d2      	mvns	r2, r2
 8000e12:	401a      	ands	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	2102      	movs	r1, #2
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
 							break;
 8000e2c:	e00a      	b.n	8000e44 <MCAL_GPIO_Init+0x328>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	2103      	movs	r1, #3
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
 							break;
 8000e42:	bf00      	nop
 					}
 				(GPIOx->CRL) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	2108      	movs	r1, #8
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
 				break;
 8000e6e:	e278      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d032      	beq.n	8000edc <MCAL_GPIO_Init+0x3c0>
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	dc3b      	bgt.n	8000ef2 <MCAL_GPIO_Init+0x3d6>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <MCAL_GPIO_Init+0x368>
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d016      	beq.n	8000eb0 <MCAL_GPIO_Init+0x394>
 8000e82:	e036      	b.n	8000ef2 <MCAL_GPIO_Init+0x3d6>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRL) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	43d2      	mvns	r2, r2
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
 							break;
 8000eae:	e020      	b.n	8000ef2 <MCAL_GPIO_Init+0x3d6>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRL) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	43d2      	mvns	r2, r2
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
 							(GPIOx->CRL) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	2102      	movs	r1, #2
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 							break;
 8000eda:	e00a      	b.n	8000ef2 <MCAL_GPIO_Init+0x3d6>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRL) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
 							break;
 8000ef0:	bf00      	nop
 					}
 				(GPIOx->CRL) |= (0Xc<<4*PINNUM);   //set two bits in CNF
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	210c      	movs	r1, #12
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
 				break;
 8000f06:	e22c      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_AF:
 				(GPIOx->CRL) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	2103      	movs	r1, #3
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	43d2      	mvns	r2, r2
 8000f18:	401a      	ands	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	2108      	movs	r1, #8
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 				(GPIOx->CRL) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
 				break;
 8000f48:	e20b      	b.n	8001362 <MCAL_GPIO_Init+0x846>



 	//Port Configuration register high GPIOx_CRH -> Configure pin 8 to pin 15
 	else{
 		PINNUM = PINNUM - 8;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	73fb      	strb	r3, [r7, #15]
 		switch(PinConfig.GPIO_MODE)
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	f200 8205 	bhi.w	8001362 <MCAL_GPIO_Init+0x846>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MCAL_GPIO_Init+0x444>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f85 	.word	0x08000f85
 8000f64:	08000fb3 	.word	0x08000fb3
 8000f68:	08000ff5 	.word	0x08000ff5
 8000f6c:	08001043 	.word	0x08001043
 8000f70:	08001093 	.word	0x08001093
 8000f74:	0800112d 	.word	0x0800112d
 8000f78:	080011db 	.word	0x080011db
 8000f7c:	08001289 	.word	0x08001289
 8000f80:	08001321 	.word	0x08001321
 		{
 			case GPIO_MODE_ANALOG:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	43d2      	mvns	r2, r2
 8000f94:	401a      	ands	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	210c      	movs	r1, #12
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	605a      	str	r2, [r3, #4]
 				break;
 8000fb0:	e1d7      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_FLO:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	2103      	movs	r1, #3
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	43d2      	mvns	r2, r2
 8000fd8:	401a      	ands	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
 				break;
 8000ff2:	e1b6      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PU:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	43d2      	mvns	r2, r2
 8001004:	401a      	ands	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	2104      	movs	r1, #4
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	2108      	movs	r1, #8
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
 				(GPIOx->ODR) |=  PinConfig.GPIO_PinNumber;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	883a      	ldrh	r2, [r7, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
 				break;
 8001040:	e18f      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_PD:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	2103      	movs	r1, #3
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	43d2      	mvns	r2, r2
 8001052:	401a      	ands	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	2104      	movs	r1, #4
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	43d2      	mvns	r2, r2
 8001068:	401a      	ands	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	2108      	movs	r1, #8
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]
 				(GPIOx->ODR) &= ~PinConfig.GPIO_PinNumber;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	883a      	ldrh	r2, [r7, #0]
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
 				break;
 8001090:	e167      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d032      	beq.n	80010fe <MCAL_GPIO_Init+0x5e2>
 8001098:	2b02      	cmp	r3, #2
 800109a:	dc3b      	bgt.n	8001114 <MCAL_GPIO_Init+0x5f8>
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <MCAL_GPIO_Init+0x58a>
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d016      	beq.n	80010d2 <MCAL_GPIO_Init+0x5b6>
 80010a4:	e036      	b.n	8001114 <MCAL_GPIO_Init+0x5f8>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	2102      	movs	r1, #2
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	605a      	str	r2, [r3, #4]
 						break;
 80010d0:	e020      	b.n	8001114 <MCAL_GPIO_Init+0x5f8>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	43d2      	mvns	r2, r2
 80010e2:	401a      	ands	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	2102      	movs	r1, #2
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	605a      	str	r2, [r3, #4]
 						break;
 80010fc:	e00a      	b.n	8001114 <MCAL_GPIO_Init+0x5f8>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	2103      	movs	r1, #3
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
 						break;
 8001112:	bf00      	nop
 				}
 				(GPIOx->CRH) &= ~(0XC<<4*PINNUM);   //reset two bits in CNF
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	210c      	movs	r1, #12
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
 				break;
 800112a:	e11a      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d032      	beq.n	8001198 <MCAL_GPIO_Init+0x67c>
 8001132:	2b02      	cmp	r3, #2
 8001134:	dc3b      	bgt.n	80011ae <MCAL_GPIO_Init+0x692>
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <MCAL_GPIO_Init+0x624>
 800113a:	2b01      	cmp	r3, #1
 800113c:	d016      	beq.n	800116c <MCAL_GPIO_Init+0x650>
 800113e:	e036      	b.n	80011ae <MCAL_GPIO_Init+0x692>
 				{
 					case GPIO_SPEED_10M:
 						(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	2102      	movs	r1, #2
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	605a      	str	r2, [r3, #4]
 						break;
 800116a:	e020      	b.n	80011ae <MCAL_GPIO_Init+0x692>
 					case GPIO_SPEED_2M:
 						(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	43d2      	mvns	r2, r2
 800117c:	401a      	ands	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
 						(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	2102      	movs	r1, #2
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	605a      	str	r2, [r3, #4]
 						break;
 8001196:	e00a      	b.n	80011ae <MCAL_GPIO_Init+0x692>
 					case GPIO_SPEED_50M:
 						(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	2103      	movs	r1, #3
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]
 						break;
 80011ac:	bf00      	nop
 				}
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bits in CNF
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	2108      	movs	r1, #8
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bits in CNF
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	2104      	movs	r1, #4
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	605a      	str	r2, [r3, #4]
 				break;
 80011d8:	e0c3      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_PP:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d032      	beq.n	8001246 <MCAL_GPIO_Init+0x72a>
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	dc3b      	bgt.n	800125c <MCAL_GPIO_Init+0x740>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <MCAL_GPIO_Init+0x6d2>
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d016      	beq.n	800121a <MCAL_GPIO_Init+0x6fe>
 80011ec:	e036      	b.n	800125c <MCAL_GPIO_Init+0x740>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	2102      	movs	r1, #2
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	605a      	str	r2, [r3, #4]
 							break;
 8001218:	e020      	b.n	800125c <MCAL_GPIO_Init+0x740>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	43d2      	mvns	r2, r2
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	2102      	movs	r1, #2
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
 							break;
 8001244:	e00a      	b.n	800125c <MCAL_GPIO_Init+0x740>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	2103      	movs	r1, #3
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
 							break;
 800125a:	bf00      	nop
 					}
 				(GPIOx->CRH) &= ~(0X4<<4*PINNUM);   //reset 1st bit in CNF
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	2104      	movs	r1, #4
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	401a      	ands	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X8<<4*PINNUM);   //set 2nd bit in CNF
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	2108      	movs	r1, #8
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
 				break;
 8001286:	e06c      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_OUTPUT_AF_OD:
 				switch(PinConfig.GPIO_OUTPUT_SPEED)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d032      	beq.n	80012f4 <MCAL_GPIO_Init+0x7d8>
 800128e:	2b02      	cmp	r3, #2
 8001290:	dc3b      	bgt.n	800130a <MCAL_GPIO_Init+0x7ee>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <MCAL_GPIO_Init+0x780>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d016      	beq.n	80012c8 <MCAL_GPIO_Init+0x7ac>
 800129a:	e036      	b.n	800130a <MCAL_GPIO_Init+0x7ee>
 					{
 						case GPIO_SPEED_10M:
 							(GPIOx->CRH) &= ~(2<<4*PINNUM);	//reset 2nd bit in MODE
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	2102      	movs	r1, #2
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	43d2      	mvns	r2, r2
 80012ac:	401a      	ands	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (1<<4*PINNUM);	//set 1st bit in MODE
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
 							break;
 80012c6:	e020      	b.n	800130a <MCAL_GPIO_Init+0x7ee>
 						case GPIO_SPEED_2M:
 							(GPIOx->CRH) &= ~(1<<4*PINNUM);	//set 2nd bit in MODE
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	43d2      	mvns	r2, r2
 80012d8:	401a      	ands	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
 							(GPIOx->CRH) |=  (2<<4*PINNUM);	//reset 1st bit in MODE
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	2102      	movs	r1, #2
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
 							break;
 80012f2:	e00a      	b.n	800130a <MCAL_GPIO_Init+0x7ee>
 						case GPIO_SPEED_50M:
 							(GPIOx->CRH) |=  (3<<4*PINNUM);	//set the two bits in MODE
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	2103      	movs	r1, #3
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	605a      	str	r2, [r3, #4]
 							break;
 8001308:	bf00      	nop
 					}
 				(GPIOx->CRH) |= (0Xc<<4*PINNUM);   //set two bits in CNF
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	210c      	movs	r1, #12
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]
 				break;
 800131e:	e020      	b.n	8001362 <MCAL_GPIO_Init+0x846>

 			case GPIO_MODE_INPUT_AF:
 				(GPIOx->CRH) &= ~(0X3<<4*PINNUM);	//reset two bits in MODE
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	2103      	movs	r1, #3
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	43d2      	mvns	r2, r2
 8001330:	401a      	ands	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) &= ~(0X8<<4*PINNUM);   //reset 2nd bit in CNF
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	2108      	movs	r1, #8
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	43d2      	mvns	r2, r2
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
 				(GPIOx->CRH) |=  (0X4<<4*PINNUM);   //set 1st bit in CNF
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	2104      	movs	r1, #4
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
 				break;
 8001360:	bf00      	nop
 		}
 	}
 }
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop

0800136c <MCAL_GPIO_Write_PIN>:
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Write_PIN(GPIO_TypeDef* GPIOx ,uint16_t PinNumber,uint8_t Value)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
	switch (Value)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <MCAL_GPIO_Write_PIN+0x1c>
 8001382:	2b01      	cmp	r3, #1
 8001384:	d008      	beq.n	8001398 <MCAL_GPIO_Write_PIN+0x2c>
		case GPIO_PIN_HIGH:
			//Set the pin
			(GPIOx->ODR) |= PinNumber;
			break;
		default:
			break;
 8001386:	e00e      	b.n	80013a6 <MCAL_GPIO_Write_PIN+0x3a>
			(GPIOx->ODR) &= ~PinNumber;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	43d2      	mvns	r2, r2
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60da      	str	r2, [r3, #12]
			break;
 8001396:	e006      	b.n	80013a6 <MCAL_GPIO_Write_PIN+0x3a>
			(GPIOx->ODR) |= PinNumber;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
			break;
 80013a4:	bf00      	nop
	}

}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <MCAL_GPIO_Write_PORT>:
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
void MCAL_GPIO_Write_PORT(GPIO_TypeDef* GPIOx ,uint16_t Value)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
	//Write the value on the whole port
	(GPIOx->ODR) = (Value & 0xFFFF);
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60da      	str	r2, [r3, #12]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <_FindPinNum>:
 * Note-		- STM32F103C6 MCU has GPIO A , B , C , D , E Modules
 * 				  but in LQFP48 Package has GPIO A , B , part of C and D exported to the external pins
 * =================================================================
 */
uint8_t _FindPinNum (uint16_t PinNumber)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	int counter=0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	while(PinNumber){
 80013da:	e005      	b.n	80013e8 <_FindPinNum+0x1c>
		counter ++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
		PinNumber = (PinNumber>>1);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	80fb      	strh	r3, [r7, #6]
	while(PinNumber){
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f6      	bne.n	80013dc <_FindPinNum+0x10>
	}
	return counter-1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <__libc_init_array>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	2600      	movs	r6, #0
 8001404:	4d0c      	ldr	r5, [pc, #48]	; (8001438 <__libc_init_array+0x38>)
 8001406:	4c0d      	ldr	r4, [pc, #52]	; (800143c <__libc_init_array+0x3c>)
 8001408:	1b64      	subs	r4, r4, r5
 800140a:	10a4      	asrs	r4, r4, #2
 800140c:	42a6      	cmp	r6, r4
 800140e:	d109      	bne.n	8001424 <__libc_init_array+0x24>
 8001410:	f000 f81a 	bl	8001448 <_init>
 8001414:	2600      	movs	r6, #0
 8001416:	4d0a      	ldr	r5, [pc, #40]	; (8001440 <__libc_init_array+0x40>)
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <__libc_init_array+0x44>)
 800141a:	1b64      	subs	r4, r4, r5
 800141c:	10a4      	asrs	r4, r4, #2
 800141e:	42a6      	cmp	r6, r4
 8001420:	d105      	bne.n	800142e <__libc_init_array+0x2e>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	f855 3b04 	ldr.w	r3, [r5], #4
 8001428:	4798      	blx	r3
 800142a:	3601      	adds	r6, #1
 800142c:	e7ee      	b.n	800140c <__libc_init_array+0xc>
 800142e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001432:	4798      	blx	r3
 8001434:	3601      	adds	r6, #1
 8001436:	e7f2      	b.n	800141e <__libc_init_array+0x1e>
 8001438:	08001488 	.word	0x08001488
 800143c:	08001488 	.word	0x08001488
 8001440:	08001488 	.word	0x08001488
 8001444:	0800148c 	.word	0x0800148c

08001448 <_init>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	bf00      	nop
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr

08001454 <_fini>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	bf00      	nop
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr
